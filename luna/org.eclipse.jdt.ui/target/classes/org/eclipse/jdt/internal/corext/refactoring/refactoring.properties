###############################################################################
# Copyright (c) 2000, 2014 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
#     Benjamin Muskalla <bmuskalla@eclipsesource.com> - [extract method] Extract method and continue https://bugs.eclipse.org/bugs/show_bug.cgi?id=48056
#     Benjamin Muskalla <bmuskalla@eclipsesource.com> - [extract method] Name ambiguous return value in error message - https://bugs.eclipse.org/bugs/show_bug.cgi?id=50607
#	  Samrat Dhillon <samrat.dhillon@gmail.com> - [introduce factory] Introduce Factory on an abstract class adds a statement to create an instance of that class - https://bugs.eclipse.org/bugs/show_bug.cgi?id=395016
###############################################################################
# NLS properties for the Refactoring Core

#######################################
# org.eclipse.jdt.internal.core.refactoring
InitializableRefactoring_argument_not_exist=The refactoring script argument ''{0}'' is missing in the refactoring script.
InitializableRefactoring_input_not_exists=The refactoring ''{1}'' ({2}) cannot be performed, since its input ''{0}'' does not exist.
InitializableRefactoring_inputs_do_not_exist=The refactoring ''{0}'' ({1}) cannot be performed, since its input does not exist.
InitializableRefactoring_illegal_argument=The value ''{0}'' of the refactoring script argument ''{1}'' is invalid.
InitializableRefactoring_inacceptable_arguments=This refactoring does not accept the specified refactoring argument.

DynamicValidationStateChange_workspace_changed=The workspace has been modified since the refactoring change object has been created
DynamicValidationRefactoringChange_fatal_error=Validation of refactoring descriptor returns fatal error status.

Checks_Choose_name=Choose a name.
Checks_all_excluded=All resources have been excluded from refactoring. Cannot proceed
Checks_cannot_be_parsed=''{0}'' has syntax errors. Content of that file will not be updated.
Checks_cu_not_created=Compilation unit could not be created for this element.
Checks_cu_not_parsed=This refactoring cannot be performed correctly due to syntax errors in the compilation unit. To perform this operation you will need to fix the errors.
Checks_cu_has_compile_errors=Code modification may not be accurate as affected resource ''{0}'' has compile errors.
Checks_no_dot=Type name cannot contain a dot (.).
Checks_cu_name_used=Compilation unit ''{0}'' already exists
Checks_method_native=Method ''{1}'' in type ''{0}'' is native. Running the modified program will cause {2}.
Checks_methodName_constructor=New method has same name as constructor of type ''{0}''.
Checks_methodName_exists=Method ''{0}'' already exists in type ''{1}''.
Checks_methodName_overrides=New method ''{0}'' overrides an existing method in type ''{1}''.
Checks_methodName_returnTypeClash=New method ''{0}'' overrides a method declared in type ''{1}'' that uses a different return type.
Checks_has_main=Type {0} contains a main method - some applications (such as scripts) may not work after refactoring.
Checks_constructor_name=If you proceed, the method ''{0}'' in ''{1}'' will have a constructor name.
Checks_method_names_lowercase=This name is discouraged. According to convention, names of methods should start with a lowercase letter.
Checks_method_names_lowercase2=The method name ''{0}'' in type ''{1}'' is discouraged. According to convention, names of methods should start with a lowercase letter.
Checks_validateEdit= Team provider refused file modification.

#######################################
# org.eclipse.jdt.internal.core.refactoring.base
#######################################

Change_does_not_exist=''{0}'' does not exist anymore.

UndoDeleteResourceChange_change_name=Restore ''{0}''
UndoDeleteResourceChange_cannot_restore=There is not enough information to create or restore ''{0}''.
UndoDeleteResourceChange_already_exists=Cannot create or restore ''{0}'' because it already exists.

Refactoring_binary={0} is binary
Refactoring_not_in_model={0} does not exist in the model
Refactoring_read_only={0} is read-only
Refactoring_unknown_structure={0} - unknown structure

#######################################
# org.eclipse.jdt.internal.core.refactoring.changes
#######################################
AbstractRenameChange_Renaming=Renaming...

RenameResourceChange_does_not_exist=''{0}'' does not exist

MovePackageChange_move=Move package ''{0}'' to ''{1}''

RenameJavaProjectChange_rename=Rename Java project ''{0}'' to ''{1}''
RenameJavaProjectChange_update=Updating classpaths

RenameSourceFolderChange_rename=Rename source folder ''{0}'' to ''{1}''
RenameSourceFolderChange_rename_archive=Cannot rename archive ''{0}''
RenameSourceFolderChange_rename_external=Cannot rename external archive or folder ''{0}''
RenameSourceFolderChange_descriptor_description=Rename source folder ''{0}'' to ''{1}''
RenameSourceFolderChange_descriptor_description_short=Rename source folder ''{0}''
RenameSourceFolderChange_error_underlying_resource_not_existing=The underlying folder for ''{0}'' does not exist
RenameSourceFolderChange_rename_linked=Cannot rename linked source folder ''{0}''

CreatePackageChange_Creating_package=Creating package
CreatePackageChange_Create_package=Create package

CopyCompilationUnitChange_copy=Copy ''{0}'' to ''{1}''

CopyPackageChange_copy=Copy package ''{0}'' to ''{1}''

RenamePackageChange_checking_change=Checking change for: {0}
RenamePackageChange_name_with_subpackages=Rename package ''{0}'' and subpackages to ''{1}''
RenamePackageChange_name=Rename package ''{0}'' to ''{1}''

MoveCompilationUnitChange_name=Move compilation unit ''{0}'' to ''{1}''

RenameCompilationUnitChange_name=Rename compilation unit ''{0}'' to ''{1}''

#######################################
# org.eclipse.jdt.internal.core.refactoring.code
#######################################

#-- Extract Method -------------------------------------------
LocalTypeAnalyzer_local_type_from_outside=Selected block references a local type declared outside the selection.
LocalTypeAnalyzer_local_type_referenced_outside=A local type declared in the selected block is referenced outside the selection.

FlowAnalyzer_execution_flow=Selected statements contain a return statement but not all possible execution flows end in a return. Semantics may not be preserved if you proceed.

ExtractMethodAnalyzer_assignments_to_local=Ambiguous return value: Selected block modifies more than one local variable used in subsequent code. Affected variables are:\n\n{0}
ExtractMethodAnalyzer_invalid_selection=Cannot extract new method since the selection is not valid.
ExtractMethodAnalyzer_after_do_keyword=Selection may not start immediately after the \'do\' keyword.
ExtractMethodAnalyzer_super_or_this=Cannot extract super or this call from constructor.
ExtractMethodAnalyzer_cannot_determine_return_type=Cannot determine expression's return type. Using void instead.
ExtractMethodAnalyzer_branch_break_mismatch=Selection contains ''{0}'', but corresponding branch target is not selected.
ExtractMethodAnalyzer_branch_continue_mismatch=Selection contains ''{0}'', but corresponding branch target (or its complete loop body) is not selected.
ExtractMethodAnalyzer_branch_mismatch=Selection contains branch statement but corresponding branch target (or the complete loop body) is not selected.
ExtractMethodAnalyzer_parent_mismatch=Not all selected statements are enclosed by the same parent statement.
ExtractMethodAnalyzer_cannot_extract_anonymous_type=Cannot extract the body of a anonymous type declaration. Select whole declaration.
ExtractMethodAnalyzer_cannot_extract_variable_declaration_fragment=Cannot extract a variable declaration fragment. Select whole declaration statement.
ExtractMethodAnalyzer_cannot_extract_variable_declaration_fragment_from_field=Cannot extract a variable declaration fragment from field declaration.
ExtractMethodAnalyzer_cannot_extract_for_initializer=Cannot extract initialization part of a \'for\' statement.
ExtractMethodAnalyzer_cannot_extract_for_updater=Cannot extract increment part of a \'for\' statement.
ExtractMethodAnalyzer_cannot_extract_from_annotation=Cannot extract out of an annotation.
ExtractMethodAnalyzer_cannot_extract_variable_declaration=Cannot extract parts of a variable declaration. Select whole declaration.
ExtractMethodAnalyzer_cannot_extract_type_reference=Cannot extract a single type reference.
ExtractMethodAnalyzer_cannot_extract_switch_case=Cannot extract the expression of a case statement.
ExtractMethodAnalyzer_cannot_extract_method_name_reference=Cannot extract a single method name.
ExtractMethodAnalyzer_cannot_extract_part_of_qualified_name=Cannot extract part of a qualified name
ExtractMethodAnalyzer_cannot_extract_name_in_declaration=Cannot extract the name part of a declaration.
ExtractMethodAnalyzer_compile_errors_no_parent_binding=The selection cannot be analyzed because of compilation errors in the enclosing type. To perform the operation you will need to fix the errors.
ExtractMethodAnalyzer_ambiguous_return_value=Ambiguous return value: Expression, access to local or return statement extracted.
ExtractMethodAnalyzer_compile_errors=The method''s body cannot be analyzed because of compilation errors in method ''{0}''. To perform the operation you will need to fix the errors.
ExtractMethodAnalyzer_leftHandSideOfAssignment=Cannot extract the left-hand side of an assignment.
ExtractMethodAnalyzer_single_expression_or_set=Can only extract a single expression or a set of statements.
ExtractMethodAnalyzer_cannot_extract_null_type=Cannot extract null expression.
ExtractMethodAnalyzer_no_valid_destination_type=No valid destination type exists.
ExtractMethodAnalyzer_resource_in_try_with_resources=Cannot extract a resource declared in a 'try-with-resources' statement.

ExtractMethodRefactoring_name=Extract Method
ExtractMethodRefactoring_add_method=Create new method ''{0}'' from selected statements
ExtractMethodRefactoring_checking_new_name=Checking new method name
ExtractMethodRefactoring_no_set_of_statements=Selection does not mark a set of statements. Only statements from a method body can be extracted.
ExtractMethodRefactoring_substitute_with_call=Substitute statements with call to {0}
ExtractMethodRefactoring_change_name=Extract Method
ExtractMethodRefactoring_name_pattern=Method name: ''{0}''
ExtractMethodRefactoring_organize_imports=Organize Imports
ExtractMethodRefactoring_duplicates_single=replace duplicate code fragment with call to {0}
ExtractMethodRefactoring_duplicates_multi=replace duplicate code fragments with call to {0}
ExtractMethodRefactoring_generate_comment=Generate method comment
ExtractMethodRefactoring_error_nameInUse=''{0}'' is already used as a name in the selected code
ExtractMethodRefactoring_error_sameParameter=A parameter ''{0}'' already exists
ExtractMethodRefactoring_visibility_pattern=Declared visibility: ''{0}''
ExtractMethodRefactoring_replace_continue=Replace continue with return
ExtractMethodRefactoring_replace_occurrences=Replace occurrences of statements with method
ExtractMethodRefactoring_error_vararg_ordering=The variable arity parameter ''{0}'' cannot be followed by another parameter
ExtractMethodRefactoring_descriptor_description=Extract method ''{0}'' from ''{1}'' to ''{2}''
ExtractMethodRefactoring_descriptor_description_short=Extract method ''{0}''
ExtractMethodRefactoring_destination_pattern=Destination type: ''{0}''
ExtractMethodRefactoring_default_visibility=(package)
ExtractMethodRefactoring_declare_thrown_exceptions=Declare thrown runtime exceptions

#-- Inline Method ------------------------------------------------------
InlineMethodRefactoring_name= Inline Method
InlineMethodRefactoring_searching= Searching for references...
InlineMethodRefactoring_processing= Processing {0}
InlineMethodRefactoring_edit_inline= Inline method invocation
InlineMethodRefactoring_edit_delete= Delete method declaration
InlineMethodRefactoring_edit_inlineCall= Inline Method
InlineMethodRefactoring_edit_import= Update import statements
InlineMethodRefactoring_error_classFile=Cannot inline method ''{0}'' since it is declared in a class file without source attachment.
InlineMethodRefactoring_remove_method=Remove method declaration
InlineMethodRefactoring_nestedInvocation=Nested invocation. Only the innermost invocation will be inlined.
InlineMethodRefactoring_original_pattern=Original element: ''{0}''
InlineMethodRefactoring_error_noMethodDeclaration= Unable to resolve corresponding method declaration.
InlineMethodRefactoring_checking_overridden= Checking for overridden methods...
InlineMethodRefactoring_replace_references=Replace all references to method with statements
InlineMethodRefactoring_descriptor_description=Inline method ''{0}'' in ''{1}''
InlineMethodRefactoring_descriptor_description_short=Inline method ''{0}''

# The three keys below are referenced indirectly by passing a string to a helper
# method. Do not remove them even if they are marked as unused.
InlineMethodRefactoring_checking_overridden_error= Type {0} overrides method to be inlined.
InlineMethodRefactoring_checking_overrides_error= Method to be inlined overrides method from class {0}.
InlineMethodRefactoring_checking_implements_error= Method to be inlined implements method from interface {0}.
# End of do-not-remove section.

InlineMethodRefactoring_SourceAnalyzer_recursive_call=Method declaration contains recursive call.
InlineMethodRefactoring_SourceAnalyzer_native_methods=Cannot inline native methods
InlineMethodRefactoring_SourceAnalyzer_declaration_has_errors=The method declaration contains compile errors. To perform the operation you will need to fix the errors.
InlineMethodRefactoring_SourceAnalyzer_typedeclaration_has_errors=The type declaration contains compile errors. To perform the operation you will need to fix the errors.
InlineMethodRefactoring_SourceAnalyzer_methoddeclaration_has_errors=The method declaration contains compile errors. To perform the operation you will need to fix the errors.

InlineMethodRefactoring_SourceAnalyzer_qualified_this_expressions=Cannot inline a method that uses qualified this expressions.
InlineMethodRefactoring_SourceAnalyzer_syntax_errors=The compilation unit containing this method declaration has syntax errors. To perform the operation you will need to fix the errors.
InlineMethodRefactoring_SourceAnalyzer_abstract_methods=Cannot inline abstract methods.

CallInliner_receiver_type=Cannot determine receiver\'s type.
CallInliner_execution_flow=Cannot inline method. Return statement in method declaration interrupts execution flow.
CallInliner_multiDeclaration=Cannot inline method used as an initializer in a multi fragment variable declaration.
CallInliner_simple_functions=Inlining is only possible on simple functions (consisting of a single return statement), or functions used in an assignment.
CallInliner_field_initializer_simple=In field initializers inlining is only supported for simple functions (e.g. functions consisting of a single return statement).
CallInliner_field_initialize_new_local=Cannot inline field initializer because new local variable is required.
CallInliner_super_into_this_expression=Cannot inline a super invocation into a this expression.
CallInliner_field_initialize_write_parameter=Cannot inline field initializer because one of the method parameters is used as an assignment target and will require new local variable.
CallInliner_field_initialize_self_reference=Cannot inline method. Method references the field to be initialized.
CallInliner_constructors=Cannot inline a constructor invocation that is used as a class instance creation.
CallInliner_cast_analysis_error=Cannot analyze call context to determine if implicit cast is needed.

TargetProvider_inaccurate_match=Inaccurate references to method found. References will be ignored.
TargetProvider_method_declaration_not_unique=Cannot uniquely resolve method to be inlined.
TargetProvider_cannot_local_method_in_binary=Cannot inline local method in binary type.

#-- SEF ------------------------------------------------------
SelfEncapsulateField_AccessAnalyzer_encapsulate_read_access=Encapsulate read access
SelfEncapsulateField_AccessAnalyzer_encapsulate_write_access=Encapsulate write access
SelfEncapsulateField_AccessAnalyzer_encapsulate_prefix_access=Encapsulate prefix access
SelfEncapsulateField_AccessAnalyzer_encapsulate_postfix_access=Encapsulate postfix access
SelfEncapsulateField_AccessAnalyzer_cannot_convert_postfix_expression=Cannot convert postfix expression. It is used inside another expression.
SelfEncapsulateFieldRefactoring_methoddoesnotexist_status_fatalError=Method {0}() does not exist in {1}

SelfEncapsulateField_name=Encapsulate Field
SelfEncapsulateField_method_exists=A method ''{0}'' already exists in type ''{1}''.
SelfEncapsulateField_use_accessors=Use getter and setter methods in declaring type
SelfEncapsulateField_compiler_errors_field=Cannot analyze field ''{0}'' due to the following compile error: {1}
SelfEncapsulateField_compiler_errors_update={0} contains compile errors. This may affect field access update.
SelfEncapsulateField_type_not_resolveable=The type of the selected field cannot be resolved. An import statement may be missing.
SelfEncapsulateField_cannot_analyze_selected_field=Cannot analyze selected field ''{0}''
SelfEncapsulateField_descriptor_description_short=Encapsulate field ''{0}''
SelfEncapsulateFieldRefactoring_descriptor_description=Encapsulate field ''{0}'' in ''{1}''
SelfEncapsulateFieldRefactoring_nosuchmethod_status_fatalError=No such method ''{0}''
SelfEncapsulateFieldRefactoring_static_method_but_nonstatic_field=The method {0} is static while the field {1} is not static
SelfEncapsulateFieldRefactoring_nonstatic_method_but_static_field=The method {0} is not static while the field {1} is static
SelfEncapsulateField_checking_preconditions=Checking preconditions..
SelfEncapsulateField_searching_for_cunits=Searching for affected compilation units...
SelfEncapsulateField_do_not_use_accessors=Do not use getter and setter methods in declaring type
SelfEncapsulateField_analyzing=Analyzing...
SelfEncapsulateField_create_changes=Create changes
SelfEncapsulateField_getter_pattern=Getter method name: ''{0}''
SelfEncapsulateField_setter_pattern=Setter method name: ''{0}''
SelfEncapsulateField_change_visibility=Change visibility to private
SelfEncapsulateField_original_pattern=Original element: ''{0}''
SelfEncapsulateField_default_visibility=(package)
SelfEncapsulateField_visibility_pattern=Field visibility: ''{0}''
SelfEncapsulateField_generate_comments=Generate method comments
SelfEncapsulateField_add_setter=Add Setter method
SelfEncapsulateField_add_getter=Add Getter method

#-- inline temp ------------------------------------------------------
InlineTempRefactoring_name=Inline Local Variable
InlineTempRefactoring_select_temp=A local variable declaration or reference must be selected to activate this refactoring.
InlineTempRefactoring_method_parameter=Cannot inline method parameters.
InlineTempRefactoring_exceptions_declared=Cannot inline exceptions declared in \'catch\' clauses.
InlineTempRefactoring_descriptor_description=Inline local variable ''{0}'' in ''{1}''
InlineTempRefactoring_descriptor_description_short=Inline local variable ''{0}''
InlineTempRefactoring_not_initialized=Local variable ''{0}'' is not initialized at declaration.
InlineTempRefactoring_assigned_more_once=Local variable ''{0}'' is assigned more than once.
InlineTempRefactoring_preview=Checking preconditions...
InlineTempRefactoring_inline=Inline local variable
InlineTempRefactoring_inline_edit_name=Replace variable reference with expression
InlineTempRefactoring_remove_edit_name=Remove variable declaration
InlineTempRefactoring_resource_in_try_with_resources=Cannot inline a resource declared in a 'try-with-resources' statement.
InlineTempRefactoring_for_initializers=Cannot inline variables declared in the initializer list of a \'for\' statement.
InlineTempRefactoring_original_pattern=Original element: ''{0}''

#-- extract temp ------------------------------------------------------
ExtractTempRefactoring_name=Extract Local Variable
ExtractTempRefactoring_select_expression=An expression must be selected to activate this refactoring.
ExtractTempRefactoring_explicit_constructor=Code from explicit constructor calls cannot be extracted to a variable.
ExtractTempRefactoring_expression_pattern=Variable expression: ''{0}''
ExtractTempRefactoring_expr_in_method_or_initializer=An expression used in a method or in an initializer must be selected to activate this refactoring.
ExtractTempRefactoring_no_void=Cannot extract an expression of type \'void\'.
ExtractTempRefactoring_null_literals=Cannot extract single null literals.
ExtractTempRefactoring_declare_final=Declare variable 'final'
ExtractTempRefactoring_array_initializer=Operation not applicable to an array initializer.
ExtractTempRefactoring_another_variable=A variable with name ''{0}'' is already defined in the visible scope.
ExtractTempRefactoring_assignment=Cannot extract assignment that is part of another expression.
ExtractTempRefactoring_convention=This name is discouraged. According to convention, names of local variables should start with a lowercase letter.
ExtractTempRefactoring_checking_preconditions=Checking preconditions...
ExtractTempRefactoring_declare_local_variable=Add variable declaration
ExtractTempRefactoring_descriptor_description=Extract local variable ''{0}'' from expression ''{1}''
ExtractTempRefactoring_descriptor_description_short=Extract local variable ''{0}''
ExtractTempRefactoring_replace=Replace expression with variable reference
ExtractTempRefactoring_name_in_new=Cannot extract this name - try selecting the whole instance creation expression.
ExtractTempRefactoring_name_pattern=Variable name: ''{0}''
ExtractTempRefactoring_names_in_declarations=An expression has to be selected to activate this refactoring. Names used in declarations are not expressions.
ExtractTempRefactoring_assigned_to=The selected expression is assigned. Extracting may change the program\'s semantics.
ExtractTempRefactoring_change_name=Extract Local Variable
ExtractTempRefactoring_refers_to_for_variable=Cannot extract expression, since it refers to a variable declared in the initializer of the enclosing \'for\' statement.
ExtractTempRefactoring_replace_occurrences=Replace occurrences of expression with variable
ExtractTempRefactoring_resource_in_try_with_resources=Cannot extract a resource declared in a 'try-with-resources' statement.
ExtractTempRefactoring_destination_pattern=Destination method: ''{0}''
ExtractTempRefactoring_for_initializer_updater=Cannot extract \'for\' initializer or updater.

#-- extract class --------------------------------------------------
ExtractClassRefactoring_change_comment_header=Extract class ''{0}'' from fields in ''{1}''
ExtractClassRefactoring_comment_field_renamed=''{0}'' as ''{1}''
ExtractClassRefactoring_change_name=Extract class
ExtractClassRefactoring_error_no_usable_fields=The selected type does not contain any usable fields
ExtractClassRefactoring_errror_nested_name_clash=A nested class named ''{0}'' already exists in ''{1}''
ExtractClassRefactoring_error_toplevel_name_clash=A class named ''{0}'' already exists in package ''{1}''
ExtractClassRefactoring_error_field_already_exists=A field with the name ''{0}'' already exists
ExtractClassRefactoring_error_duplicate_field_name=Duplicate field name ''{0}''
ExtractClassRefactoring_error_unable_to_convert_node=Unable to convert node to getter/setter
ExtractClassRefactoring_error_referencing_private_class=The private class ''{0}'' is referenced. The resulting code will contain errors
ExtractClassRefactoring_error_referencing_protected_class=The protected class ''{0}'' that is declared outside of package ''{1}'' is referenced. The resulting code will contain errors
ExtractClassRefactoring_error_field_is_static=The field ''{0}'' is static
ExtractClassRefactoring_error_msg_one_field=At least one field should be created
ExtractClassRefactoring_error_switch=An updated node is used in a switch case. The resulting code will contain errors.
ExtractClassRefactoring_group_insert_parameter=Insert Field Class
ExtractClassRefactoring_group_replace_write=Replace write accesses
ExtractClassRefactoring_group_replace_read=Replace read accesses
ExtractClassRefactoring_group_remove_field=Remove Fields
ExtractClassRefactoring_comment_move_field=Moved fields:
ExtractClassRefactoring_progress_create_change=Creating change
ExtractClassRefactoring_progress_final_conditions=Checking final conditions
ExtractClassRefactoring_progress_msg_check_initial_condition=Checking initial conditions
ExtractClassRefactoring_fatal_error_cannot_resolve_binding=Can not resolve binding for field ''{0}''
ExtractClassRefactoring_progress_updating_references=Updating references
ExtractClassRefactoring_refactoring_name=Extract Class...
ExtractClassRefactoring_comment_package=Package: ''{0}''
ExtractClassRefactoring_comment_getters=Create getters and setters
ExtractClassRefactoring_comment_fieldname=Field object: ''{0}''
ExtractClassRefactoring_warning_no_fields_moved=No fields will be moved
ExtractClassRefactoring_warning_semantic_change=The code rewrite of this node may change its semantic
ExtractClassRefactoring_comment_extracted_class=Extracted class name: ''{0}''
ExtractClassRefactoring_warning_field_is_transient=The field ''{0}'' is transient. Please review the resulting code
ExtractClassRefactoring_warning_field_is_volatile=The field ''{0}'' is volatile. Please review the resulting code
ExtractClassContribution_error_unknown_descriptor=Unknown Descriptor

#-- extract constant --------------------------------------------------
ExtractConstantRefactoring_name=Extract Constant
ExtractConstantRefactoring_descriptor_description=Extract constant ''{0}'' from expression ''{1}''
ExtractConstantRefactoring_descriptor_description_short=Extract constant ''{0}''
ExtractConstantRefactoring_select_expression=An expression must be selected to activate this refactoring.
ExtractConstantRefactoring_visibility_pattern=Declared visibility: ''{0}''
ExtractConstantRefactoring_replace_occurrences=Replace occurrences of expression with constant
ExtractConstantRefactoring_qualify_references=Qualify references to constant
ExtractConstantRefactoring_declare_constant=Add constant declaration
ExtractConstantRefactoring_default_visibility=(package)
ExtractConstantRefactoring_replace=Replace expression with constant reference
ExtractConstantRefactoring_another_variable=A variable with name ''{0}'' is already defined in the visible scope.
ExtractConstantRefactoring_no_void=Cannot extract an expression of type \'void\'.
ExtractConstantRefactoring_null_literals=Cannot extract single null literals.
ExtractConstantRefactoring_not_load_time_constant=Cannot extract this expression - it is not a valid static constant.
ExtractConstantRefactoring_convention=This name is discouraged. According to convention, names of class constants do not contain lowercase letters.
ExtractConstantRefactoring_change_name=Extract Constant
ExtractConstantRefactoring_checking_preconditions=Checking preconditions...
ExtractConstantRefactoring_constant_name_pattern=Constant name: ''{0}''
ExtractConstantRefactoring_constant_expression_pattern=Constant expression: ''{0}''

#-- introduce parameter --------------------------------------------------
IntroduceParameterRefactoring_name=Introduce Parameter
IntroduceParameterRefactoring_syntax_error=This compilation unit contains syntax errors. To perform the operation you will need to fix the errors.
IntroduceParameterRefactoring_select=An expression must be selected to activate this refactoring.
IntroduceParameterRefactoring_expression_in_method=An expression used in a method must be selected to activate this refactoring.
IntroduceParameterRefactoring_expression_pattern=Parameter expression: ''{0}''
IntroduceParameterRefactoring_descriptor_description=Introduce parameter ''{0}'' for ''{1}'' from expression ''{2}''
IntroduceParameterRefactoring_descriptor_description_short=Introduce parameter for ''{0}''
IntroduceParameterRefactoring_cannot_introduce=Cannot introduce parameter: {0}.
IntroduceParameterRefactoring_original_pattern=Original element: ''{0}''
IntroduceParameterRefactoring_parameter_pattern=Parameter name: ''{0}''
IntroduceParameterRefactoring_no_binding=Cannot resolve binding of enclosing method declaration.
IntroduceParameterRefactoring_no_void=Cannot introduce a parameter from an expression of type \'void\'.
IntroduceParameterRefactoring_replace=Replace expression with a parameter reference

#######################################
# org.eclipse.jdt.internal.core.refactoring.rename
#######################################
RenameCompilationUnitRefactoring_name=Rename Compilation Unit
RenameCompilationUnitRefactoring_not_parsed={0} has syntax errors. No references will be updated if you proceed
RenameCompilationUnitRefactoring_not_parsed_1={0} has syntax errors.
RenameCompilationUnitChange_descriptor_description=Rename compilation unit ''{0}'' to ''{1}''
RenameCompilationUnitChange_descriptor_description_short=Rename compilation unit ''{0}''
RenameCompilationUnitRefactoring_same_name=The name has not been changed.

RenameEnumConstRefactoring_name=Rename Enum Constant
RenameEnumConstRefactoring_convention=This name is discouraged. According to convention, names of enum constants do not contain lowercase letters.
RenameEnumConstRefactoring_another_name=Choose another name.
RenameEnumConstRefactoring_const_already_defined=Enum constant with this name is already defined.
RenameEnumConstProcessor_descriptor_description=Rename enum constant ''{0}'' of ''{1}'' to ''{2}''
RenameEnumConstProcessor_descriptor_description_short=Rename enum constant ''{0}''

RenameFieldRefactoring_name=Rename Field
RenameFieldRefactoring_searching=Searching for references...
RenameFieldRefactoring_checking=Checking preconditions...
RenameFieldRefactoring_hiding=After renaming, the field ''{0}'' will be hidden in the scope of the field ''{1}'' declared in type ''{2}''
RenameFieldRefactoring_hiding2=After renaming, the field named ''{0}'' declared in type ''{1}'' will be hidden in the scope of the field ''{2}''
RenameFieldRefactoring_another_name=Choose another name.
RenameFieldRefactoring_another_name2=The field ''{0}'' in type ''{1}'' already has the assigned name.
RenameFieldRefactoring_field_already_defined=A field with this name is already defined.
RenameFieldRefactoring_field_already_defined2=A field with name ''{0}'' is already defined in ''{1}''.
RenameFieldRefactoring_deleted=The selected field has been deleted from ''{0}''
RenameFieldRefactoring_already_exists=Method ''{0}'' already exists in ''{1}''
RenameFieldRefactoring_overridden=Method ''{0}'' is overridden or overrides another method
RenameFieldRefactoring_overridden_or_overrides=Method ''{0}'' is overridden or overrides another method
RenameFieldRefactoring_Update_getter_occurrence=Update getter occurrence
RenameFieldRefactoring_Update_setter_occurrence=Update setter occurrence
RenameFieldRefactoring_Update_field_declaration=Update field declaration
RenameFieldRefactoring_descriptor_description_short=Rename field ''{0}''
RenameFieldRefactoring_Update_field_reference=Update field reference
RenameFieldRefactoring_should_start_lowercase=The field name is discouraged. According to convention, field names should start with a lowercase letter.
RenameFieldRefactoring_setting_rename_settter=Rename setter method for field
RenameFieldRefactoring_should_start_lowercase2= The field name ''{0}'' in type ''{1}'' is discouraged. According to convention, field names should start with a lowercase letter. 
RenameFieldRefactoring_declared_in_supertype=Cannot be renamed because it is declared in a supertype
RenameFieldRefactoring_setting_rename_getter=Rename getter method for field
RenameFieldProcessor_descriptor_description=Rename field ''{0}'' in ''{1}'' to ''{2}''

RenameTypeParameterRefactoring_deleted=The selected type variable has been deleted from ''{0}''
RenameTypeParameterProcessor_name=Rename Type Variable
RenameTypeParameterProcessor_change_name=Rename Type Variable
RenameTypeParameterRefactoring_should_start_lowercase=This name is discouraged. According to convention, names of type variables do not contain lowercase letters.
RenameTypeParameterProcessor_descriptor_description=Rename type variable ''{0}'' of ''{1}'' to ''{2}''
RenameTypeParameterProcessor_descriptor_description_short=Rename type variable ''{0}''
RenameTypeParameterRefactoring_another_name=Choose another name.
RenameTypeParameterRefactoring_method_type_parameter_already_defined=A type variable with this name is already defined in the declaring method.
RenameTypeParameterRefactoring_class_type_parameter_already_defined=A type variable with this name is already defined in the declaring type.
RenameTypeParameterRefactoring_searching=Searching for references...
RenameTypeParameterRefactoring_checking=Checking preconditions...
RenameTypeParameterRefactoring_update_type_parameter_declaration=Update type variable declaration
RenameTypeParameterRefactoring_update_type_parameter_reference=Update type variable reference
RenameTypeParameterRefactoring_type_parameter_inner_class_clash=The new type variable name conflicts with the name of the class ''{0}''.

RenamePackageRefactoring_another_name=Choose another name.
RenamePackageRefactoring_checking=Checking preconditions...
RenamePackageRefactoring_creating_change=Preparing preview...
RenamePackageRefactoring_package_exists=Package already exists
RenamePackageRefactoring_searching=Searching for references...
RenamePackageRefactoring_update_reference=Update package reference
RenamePackageRefactoring_update_imports=Update imports
RenamePackageRefactoring_name=Rename Package
RenamePackageRefactoring_aleady_exists=Package ''{0}'' already exists in this project in folder ''{1}''

RenameMethodInInterfaceRefactoring_already_defined=A related type declares a method with the new name (and same number of parameters)
RenameMethodInInterfaceRefactoring_special_case=Cannot rename this method because it is a special case (see the language specification section 9.2 for details)

RenameMethodRefactoring_name=Rename Method
RenameMethodRefactoring_no_binary=Related method ''{0}'' (declared in ''{1}'') is binary. Refactoring cannot be performed.
RenameMethodRefactoring_no_native=Renaming native methods will cause an unsatisfied link error on runtime.
RenameMethodRefactoring_no_native_1=Related method ''{0}'' (declared in ''{1}'') is native. Renaming will cause an UnsatisfiedLinkError on runtime.
RenameMethodRefactoring_no_read_only=Related method ''{0}'' (declared in ''{1}'') is read-only. Refactoring cannot be performed.
RenameMethodRefactoring_not_in_model=Related method ''{0}'' (declared in ''{1}'') does not exist in the model.
RenameMethodRefactoring_same_name=This name already exists.
RenameMethodRefactoring_same_name2=The method ''{0}'' in type ''{1}'' already has the assigned name.
RenameMethodRefactoring_update_occurrence=Update method reference
RenameMethodRefactoring_update_declaration=Update method declaration
RenameMethodRefactoring_deleted=The selected method has been deleted from ''{0}''
RenameMethodRefactoring_taskName_checkingPreconditions=Checking preconditions...
RenameMethodRefactoring_taskName_searchingForReferences=Searching for references...
RenameMethodRefactoringContribution_could_not_create=Could not create a method handle for project ''{0}'' with handle identifier ''{1}''

RenameMethodProcessor_descriptor_description=Rename method ''{0}'' to ''{1}''
RenameMethodProcessor_descriptor_description_short=Rename method ''{0}''
RenameMethodProcessor_is_binary=Method to be renamed is binary.
RenameMethodProcessor_change_name=Rename Method

RenamePrivateMethodRefactoring_hierarchy_defines=''{0}'' or a type in its hierarchy defines a method ''{1}'' with the same number of parameters and the same parameter type names.
RenamePrivateMethodRefactoring_hierarchy_defines2=''{0}'' or a type in its hierarchy defines a method ''{1}'' with the same number of parameters, but different parameter type names.
RenamePrivateMethodRefactoring_update=Update method reference

RenameVirtualMethodRefactoring_requieres_renaming_native=Renaming ''{0}'' requires renaming a native method. Renaming will cause {1} on runtime.
RenameVirtualMethodRefactoring_hierarchy_declares1=Hierarchy declares a method ''{0}'' with the same number of parameters, but different parameter type names.
RenameVirtualMethodRefactoring_hierarchy_declares2=Hierarchy declares a method ''{0}'' with the same number of parameters and the same parameter type names.

RenameLocalVariableProcessor_descriptor_description=Rename local variable ''{0}'' in ''{1}'' to ''{2}''
RenameLocalVariableProcessor_descriptor_description_short=Rename local variable ''{0}''

RenameTypeRefactoring_checking=Checking preconditions...
RenameTypeRefactoring_choose_another_name=Please choose another name.
RenameTypeRefactoring_creating_change=Preparing preview...
RenameTypeRefactoring_rename_constructor=rename constructor
RenameTypeRefactoring_searching=Searching for references...
RenameTypeRefactoring_update_reference=Update type reference
RenameTypeRefactoring_name=Rename Type
RenameTypeRefactoring_enclosed=Type ''{0}'' is enclosed in a type named ''{1}''
RenameTypeRefactoring_encloses=Type ''{0}'' encloses a type named ''{1}''
RenameTypeRefactoring_exists=Type named ''{0}'' already exists in package ''{1}''
RenameTypeRefactoring_imported=Type named ''{0}'' is imported (single-type-import) in ''{1}'' (a compilation unit must not import and declare a type with the same name)
RenameTypeRefactoring_member_type_exists=Another member type named ''{0}'' already exists in ''{1}''
RenameTypeRefactoring_enclosed_type_native=A type enclosed in type ''{0}'' declares a native method. Renaming will cause an unsatisfied link error on runtime.
ReferencesInBinaryContext_binaryRefsNotUpdated=Binary references to a refactored element have been found. They will not be updated, which may lead to problems if you proceed.
RenameTypeProcessor_descriptor_description=Rename type ''{0}'' to ''{1}''
RenameTypeProcessor_descriptor_description_short=Rename type ''{0}''
RenameTypeProcessor_progress_current_total=({0}/{1})

RenameTypeProcessor_changeCategory_type=Rename Type Changes
RenameTypeProcessor_change_name=Rename Type
RenameTypeProcessor_creating_changes=Creating changes...
RenameTypeProcessor_changeCategory_type_description=Changes to rename the type
RenameTypeProcessor_deselected_method_is_overridden=The unselected method ''{0}'' in type ''{1}'' is overridden. All related overridden methods have been unselected as well.
RenameTypeProcessor_changeCategory_method=Rename Method Changes
RenameTypeProcessor_changeCategory_fields=Rename Field Changes
RenameTypeProcessor_changeCategory_local_variables=Rename Local Variable Changes
ReferencesInBinaryContext_ref_in_binaries_description=Elements containing binary references to refactored element ''{0}''
ReferencesInBinaryContext_ref_in_binaries_description_plural=Elements containing binary references to refactored elements
RenameTypeProcessor_renamed_method_is_overridden=One of the overridden methods around ''{0}'' in type ''{1}'' have been given a custom name, but it is overridden. All related overridden methods have been deselected.
RenameTypeProcessor_changeCategory_local_variables_description=Changes to rename similarly named local variables
RenameTypeProcessor_changeCategory_method_description=Changes to rename similarly named methods
RenameTypeProcessor_changeCategory_fields_description=Changes to rename similarly named fields
RenameTypeProcessor_checking_similarly_named_declarations_refactoring_conditions=Checking preconditions for similarly named elements...
RenameTypeProcessor_cannot_rename_methods_same_new_name=The two methods ''{0}'' and ''{1}'' in type ''{2}'' cannot be renamed to the same new name ''{3}''.
RenameTypeProcessor_cannot_rename_fields_same_new_name=The two fields ''{0}'' and ''{1}'' in type ''{2}'' cannot be renamed to the same new name ''{3}''.

RenameTypeRefactoring_name_conflict1=Name conflict with type ''{0}'' in ''{1}''
RenameTypeRefactoring_searching_text=searching for textual occurrences
RenameTypeRefactoring_update=Type declaration update
RenameTypeRefactoring_does_not_exist=Type ''{0}'' does not exist in the saved version of ''{1}''
RenameTypeRefactoring_will_not_rename=Compilation unit will not be renamed
RenameTypeRefactoring_local_type=Local Type declared inside ''{0}'' is named {1}
RenameTypeRefactoring_member_type=Member Type declared inside ''{0}'' is named {1}
RenameTypeRefactoring_another_type=Another type named ''{0} is referenced in ''{1}''. Semantics may not be preserved if you proceed.

TextMatchUpdater_update=Update textual occurrence
TextMatchUpdater_searching=searching for textual occurrences in:
TextMatchUpdater_textualMatches_name=Textual Changes
TextMatchUpdater_textualMatches_description=Changes to textual occurrences in comments and strings

QualifiedNameFinder_qualifiedNames_name=Qualified Name Changes
QualifiedNameFinder_qualifiedNames_description=Changes to qualified names in non-Java files

RefactoringAnalyzeUtil_name_collision=Name collision with name ''{0}''

RefactoringSearchEngine_binary_match_ungrouped=An occurrence in a binary type in project ''{0}'' has been found. These occurrences will not be updated, which may lead to compile errors if you proceed.
RefactoringSearchEngine_binary_match_grouped=Occurrences in binary types in project ''{0}'' have been found. These occurrences will not be updated, which may lead to compile errors if you proceed.
RefactoringSearchEngine_inaccurate_match=Inaccurate matches have been found in resource ''{0}''. Please review changes on the preview page.
RefactoringSearchEngine_searching_occurrences=Searching for occurrences...
RefactoringSearchEngine_searching_referenced_types=Searching for referenced types...
RefactoringSearchEngine_searching_referenced_fields=Searching for referenced fields...
RefactoringSearchEngine_searching_referenced_methods=Searching for referenced methods...
RefactoringSearchEngine_potential_matches=Found potential matches. Please review changes on the preview page.
RefactoringSearchEngine_non_cu_matches=Found matches in binary types. Occurrences will not be updated, which may lead to compile errors if you proceed.

ReplaceInvocationsRefactoring_select_method_to_apply=Select a method declaration or method invocation to apply this refactoring.
ReplaceInvocationsRefactoring_descriptor_description=Replace invocations of ''{0}'' in ''{1}''
ReplaceInvocationsRefactoring_original_pattern=Original element: ''{0}''
ReplaceInvocationsRefactoring_replace_references=Replace all references to method with body
ReplaceInvocationsRefactoring_name=Replace Invocations
ReplaceInvocationsRefactoring_change_name=Replace Invocations
ReplaceInvocationsRefactoring_cannot_replace_in_binary=Cannot replace invocation in a binary method.

RenameTempRefactoring_must_select_local=A local variable declaration or reference must be selected to activate this refactoring
RenameTempRefactoring_only_in_methods_and_initializers=Only local variables declared in methods and initializers can be renamed
RenameTempRefactoring_only_in_methods_initializers_and_lambda=Only local variables declared in methods, initializers and lambda expression can be renamed
RenameTempRefactoring_lowercase=This name is discouraged. According to convention, names of local variables should start with a lowercase letter.
RenameTempRefactoring_lowercase2=The variable name ''{0}'' in ''{1}'' (type ''{2}'') is discouraged. According to convention, names of local variables should start with a lowercase letter.
RenameTempRefactoring_rename=Rename Local Variable
RenameTempRefactoring_changeName=Update local variable reference

MethodChecks_overrides=The selected method overrides method ''{0}'' declared in type ''{1}''.
MethodChecks_implements=The selected method is an implementation of method ''{0}'' declared in type ''{1}''

RenameJavaProjectRefactoring_rename=Rename Java Project
RenameJavaProjectRefactoring_already_exists=A project with that name already exists
RenameJavaProjectChange_descriptor_description=Rename Java project ''{0}'' to ''{1}''
RenameJavaProjectProcessor_folder_already_exists=A folder with that name already exists.
RenameJavaProjectProcessor_descriptor_description_short=Rename Java project ''{0}''
RenameJavaProjectRefactoring_read_only=Project ''{0}'' is marked as read-only

RenamePackageRefactoring_searching_text=searching for text matches
RenamePackageRefactoring_Packagered_only=Package ''{0}'' is read-only.
RenamePackageRefactoring_resource_read_only=Resource corresponding to package ''{0}'' is read-only. Click ''Continue'' if still you want to rename it.
RenamePackageProcessor_descriptor_description=Rename package ''{0}'' to ''{1}''
RenamePackageProcessor_rename_subpackages=Rename subpackages of the package
RenamePackageProcessor_subpackage_collides=A subpackage collides with the existing package ''{0}''.
RenamePackageProcessor_descriptor_description_short=Rename package ''{0}''
RenamePackageRefactoring_contains_type=Package ''{0}'' already contains a type named ''{1}''
RenamePackageRefactoring_change_name=Rename Package

RenameSourceFolderRefactoring_blank=Name must not start or end with a blank
RenameSourceFolderRefactoring_invalid_name=This is an invalid name for a file or folder
RenameSourceFolderRefactoring_already_exists=An element with this name already exists
RenameSourceFolderRefactoring_alread_exists=An element with this name already exists
RenameSourceFolderRefactoring_rename=Rename Source Folder

#######################################
# org.eclipse.jdt.internal.core.refactoring.reorg
#######################################
MoveRefactoring_reorganize_elements=Reorganize elements

DeleteRefactoring_delete_package_fragment_root= Deleting a package fragment root

MoveCuUpdateCreator_update_imports=Update imports
MoveCuUpdateCreator_searching=Searching for references to types in ''{0}''
MoveCuUpdateCreator_update_references=Update references

CopyRefactoring_cu_copyOf1=CopyOf{0}
CopyRefactoring_cu_copyOfMore=Copy_{0}_of_{1}
CopyRefactoring_resource_copyOf1=Copy of {0}
CopyRefactoring_resource_copyOfMore=Copy ({0}) of {1}
CopyRefactoring_package_copyOf1={0}.copy
CopyRefactoring_package_copyOfMore={1}.copy{0}

#######################################
# org.eclipse.jdt.internal.core.refactoring.structure
#######################################
ExtractSupertypeProcessor_computing_possible_types=Computing possible types...
ExtractSupertypeProcessor_refactored_element_pattern=Extracted class: ''{0}''
ExtractSupertypeProcessor_category_description=Changes to extract the new class
ExtractSupertypeProcessor_extract_supertype=Extract Superclass
ExtractSupertypeProcessor_subtypes_pattern=Sub types:
ExtractSupertypeProcessor_descriptor_description=Extract superclass ''{0}'' from ''{1}''
ExtractSupertypeProcessor_descriptor_description_short=Extract superclass ''{0}''
ExtractSupertypeProcessor_checking=Checking preconditions...
ExtractSupertypeProcessor_preparing=Preparing refactoring...
ExtractSupertypeProcessor_category_name=Extract Superclass Changes
ExtractSupertypeProcessor_add_supertype=Add extracted type
ExtractSupertypeProcessor_unexpected_exception_on_layer=An unexpected exception occurred while creating working copies. See the error log for more details.

PullUpRefactoring_Pull_Up=Pull Up
PullUpRefactoring_no_java_lang_Object=Pull up is not available on members declared in 'java.lang.Object'.
PullUpRefactoring_not_this_type=Pull Up is not available on type ''{0}'', since it does not have super types to which members could be pulled up.
PullUpRefactoring_category_name=Pull Up Changes
PullUPRefactoring_no_all_binary=Pull up is not available on this type. All super types are binary.
PullUPRefactoring_not_java_lang_object=Pull up is not available on this type. Type has no super types.
PullUpRefactoring_final_fields=Moving final fields will result in compilation errors if they are not initialized on creation or in constructors
PullUpRefactoring_checking_referenced_elements=Checking referenced elements...
PullUpRefactoring_type_not_accessible=Type ''{0}'' referenced in one of the moved elements is not accessible from type ''{1}''
PullUpRefactoring_field_not_accessible=Field ''{0}'' referenced in one of the moved elements is not accessible from type ''{1}''
PullUpRefactoring_method_not_accessible=Method ''{0}'' referenced in one of the moved elements is not accessible from type ''{1}''
PullUpRefactoring_different_method_return_type=Method ''{0}'' declared in type''{1}'' has a different return type than its moved counterpart, which will result in compile errors if you proceed
PullUpRefactoring_different_field_type=Field ''{0}'' declared in type ''{1}'' has a different type than its moved counterpart
PullUpRefactoring_lower_default_visibility=Method ''{0}'' declared in type ''{1}'' has visibility lower than ''package'', which will result in compile errors if you proceed
PullUpRefactoring_lower_protected_visibility=Method ''{0}'' declared in type ''{1}'' has visibility lower than ''protected'', which will result in compile errors if you proceed
PullUpRefactoring_checking=Checking preconditions...
PullUpRefactoring_add_method_stub=Add method stub
PullUpRefactoring_add_abstract_method=Add abstract method declaration
PullUpRefactoring_make_target_abstract=Make destination class abstract
PullUpRefactoring_calculating_required=Computing required members...
PullUpRefactoring_category_description=Changes to pull up members
PullUpRefactoring_Field_declared_in_class=Field ''{0}'' is declared in class ''{1}''. Moving it may result in changed program semantics.
PullUpRefactoring_add_override_annotation=Add '@Override' annotation
PullUpRefactoring_Method_declared_in_class=Method ''{0}'' is declared in class ''{1}''. Moving it may result in changed program semantics.
PullUpRefactoring_field_cannot_be_accessed=Field ''{0}'' cannot be accessed from ''{1}''
PullUpRefactoring_method_cannot_be_accessed=Method ''{0}'' cannot be accessed from ''{1}''
PullUpRefactoring_Type_declared_in_class=Type ''{0}'' is declared in class ''{1}''. Moving it may result in changed program semantics.
PullUpRefactoring_descriptor_description=Pull up members from ''{0}'' to ''{1}''
PullUpRefactoring_descriptor_description_full=Pull up ''{0}'' from ''{1}'' to ''{2}''
PullUpRefactoring_descriptor_description_short=Pull up ''{0}'' to ''{1}''
PullUpRefactoring_descriptor_description_short_multiple=Pull up members to ''{0}''
PullUpRefactoring_Type_variable_not_available=The type parameter ''{0}'' cannot be mapped to the super type ''{1}''
PullUpRefactoring_Type_variable2_not_available=The type parameters ''{0}'' and ''{1}'' cannot be mapped to the super type ''{2}''
PullUpRefactoring_Type_variable3_not_available=The type parameters ''{0}'', ''{1}'' and ''{2}'' cannot be mapped to the super type ''{3}''
PullUpRefactoring_Type_variables_not_available=Several type parameters cannot be mapped to the super type ''{0}''
PullUpRefactoring_non_final_pull_up_to_interface=Moving non-final fields to an interface will result in compile errors if they are not initialized on creation or in constructors
PullUpRefactoring_incompatible_langauge_constructs=Moving ''{0}'' which contains annotations to destination type ''{1}'' will result in compile errors, since the destination is not J2SE 5.0 compatible.
PullUpRefactoring_incompatible_language_constructs1=Moving ''{0}'' which contains varargs to destination type ''{1}'' will result in compile errors, since the destination is not J2SE 5.0 compatible.
PullUpRefactoring_moving_static_method_to_interface=Moving ''{0}'' which is declared ''static'' will result in compile errors, since the interface method is hidden by the static method.

MemberCheckUtil_signature_exists=Method ''{0}'' (with the same signature) already exists in type ''{1}'', which will result in compile errors if you proceed
MemberCheckUtil_same_param_count=Method ''{0}'' (with the same number of parameters) already exists in type ''{1}''
MemberCheckUtil_field_exists=Field ''{0}'' already exists in type ''{1}'', which will result in compile errors if you proceed
MemberCheckUtil_type_name_conflict0=Nested type ''{0}'' already exists in type ''{1}'', which will result in compile errors if you proceed
MemberCheckUtil_type_name_conflict1=Destination type has the same simple name as ''{0}'', which will result in compile errors if you proceed
MemberCheckUtil_type_name_conflict2=Destination type is enclosed in a type that has the same simple name as ''{0}'', which will result in compile errors if you proceed
MemberCheckUtil_type_name_conflict3=Destination type has the same simple name as ''{0}'' (enclosed in ''{1}''), which will result in compile errors if you proceed
MemberCheckUtil_type_name_conflict4=Destination type is enclosed in a type that has the same simple name as ''{0}'' (enclosed in ''{1}''), which will result in compile errors if you proceed

MoveMembersRefactoring_Move_Members=Move Members
MoveMembersRefactoring_compile_errors=Operation cannot be performed due to compile errors in ''{0}''. To perform this operation you will need to fix the errors.
MoveMembersRefactoring_deleteMembers= Delete members
MoveMembersRefactoring_addMembers= Add members
MoveMembersRefactoring_referenceUpdate= Update reference to moved member
MoveMembersRefactoring_static_declaration=Static members can be declared only in top level or static types.
MoveMembersRefactoring_member_will_be_public=Moved member will be public in the destination interface
MoveMembersRefactoring_multi_var_fields=Only field declarations with single variable declaration fragments can be moved.
MoveMembersRefactoring_only_public_static=Only 'public static' types and 'public static final' fields with variable initializers can be moved to an interface.
MoveMembersRefactoring_only_public_static_18=Only 'public static' types, 'public static' methods and 'public static final' fields with variable initializers can be moved to an interface.
MoveMembersRefactoring_Object=Move is not allowed on members declared in 'java.lang.Object'.
MoveMembersRefactoring_binary=Pull up is not allowed on members of binary types.
MoveMembersRefactoring_read_only=Pull up is not allowed on members of read-only types.
MoveMembersRefactoring_move_members=Move members
MoveMembersRefactoring_not_found=Destination type ''{0}'' cannot be found
MoveMembersRefactoring_same=Destination and source types are the same (''{0}'')
MoveMembersRefactoring_inside=Destination type ''{1}'' is inside moved member''{0}''.
MoveMembersRefactoring_not_exist=Destination type ''{0}'' does not exist
MoveMembersRefactoring_dest_binary=Destination type ''{0}'' is binary
MoveMembersRefactoring_native=Moved method ''{0}'' is native. You will need to update native libraries.
MoveMembersRefactoring_moved_field=In ''{2}'', moved field ''{0}'' will not be visible from ''{1}''
MoveMembersRefactoring_accessed_field=Accessed field ''{0}'' will not be visible from ''{1}''
MoveMembersRefactoring_moved_method=In ''{2}'', moved method ''{0}'' will not be visible from ''{1}''
MoveMembersRefactoring_accessed_method=Accessed method ''{0}'' will not be visible from ''{1}''
MoveMembersRefactoring_moved_type=In ''{2}'', moved type ''{0}'' will not be visible from ''{2}''
MoveMembersRefactoring_accessed_type=Accessed type ''{0}'' will not be visible from ''{1}''
MoveMembersRefactoring_creating=Checking preconditions...
MoveMembersRefactoring_checking=Checking preconditions...
MoveRefactoring_scanning_qualified_names=Searching for qualified names...

QualifiedNameFinder_update_name=Update qualified name

IntroduceParameterObjectRefactoring_cannotanalysemethod_compilererror=Cannot analyze method due to the following compile error: {0}
IntroduceParameterObjectRefactoring_cannotalanyzemethod_mappingerror=Cannot analyze selected method
IntroduceParameterObjectRefactoring_parameter_object_creation_error=Parameter object content creation failed
IntroduceParameterObjectRefactoring_error_cannot_resolve_type=The type of the selected field cannot be resolved. An import statement may be missing.
IntroduceParameterObjectRefactoring_descriptor_enclosing_type=Enclosing type: {0}
IntroduceParameterObjectRefactoring_descriptor_keep_parameter=Keep parameters:
IntroduceParameterObjectRefactoring_descriptor_create_getter=Create getters
IntroduceParameterObjectRefactoring_descriptor_create_setter=Create setters
IntroduceParameterObjectRefactoring_refactoring_name=Introduce Parameter Object
IntroduceParameterObjectRefactoring_descriptor_description=Introduce parameter object for method ''{0}''
IntroduceParameterObjectRefactoring_descriptor_object_class=Parameter object class: {0}
IntroduceParameterObjectRefactoring_descriptor_package=Package: {0}
IntroduceParameterObjectRefactoring_descriptor_fields=Create fields for:

#######################################
# org.eclipse.jdt.internal.core.refactoring.surround
#######################################

SurroundWithTryCatchRefactoring_name=Surround with try/catch Block
SurroundWithTryCatchRefactoring_notMultipleexceptions=The selected code does not throw multiple uncaught exceptions. A simple catch block will be created.
SurroundWithTryCatchAnalyzer_doesNotCover=Selection does not cover a set of statements. Extend selection to a valid range using the \'Expand Selection To\' actions from the \'Edit\' menu.
SurroundWithTryCatchAnalyzer_doesNotContain=Selection does not contain statements from a method body or static initializer.
SurroundWithTryCatchAnalyzer_onlyStatements=Only statements can be surrounded with try/catch blocks.
SurroundWithTryCatchAnalyzer_cannotHandleSuper=Cannot surround a super constructor call.
SurroundWithTryCatchAnalyzer_cannotHandleThis=Cannot surround a constructor invocation.
SurroundWithTryCatchAnalyzer_compile_errors=The selected code cannot be analyzed because of compilation errors. To perform this operation you will need to fix the errors.

#######################################
# org.eclipse.jdt.internal.core.refactoring.util
#######################################

CommentAnalyzer_internal_error=Internal error during precondition checking.
CommentAnalyzer_ends_inside_comment=Selection ends inside a comment.
CommentAnalyzer_starts_inside_comment=Selection begins inside a comment.

StatementAnalyzer_doesNotCover=The selection does not cover a set of statements or an expression. Extend selection to a valid range using the \'Expand Selection To\' actions from the \'Edit\' menu.
StatementAnalyzer_beginning_of_selection=The beginning of the selection contains characters that do not belong to a statement.
StatementAnalyzer_end_of_selection=The end of the selection contains characters that do not belong to a statement.
StatementAnalyzer_do_body_expression=Operation not applicable to a \'do\' statement's body and expression.
StatementAnalyzer_for_initializer_expression=Operation not applicable to a \'for\' statement's initializer and expression part.
StatementAnalyzer_for_expression_updater=Operation not applicable to a \'for\' statement's expression and updater part.
StatementAnalyzer_for_updater_body=Operation not applicable to a \'for\' statement's updater and body part.
StatementAnalyzer_catch_argument=Operation is not applicable to a catch block's argument declaration.
StatementAnalyzer_while_expression_body=Operation not applicable to a while statement's expression and body.
StatementAnalyzer_try_statement=Selection must either cover whole try statement or parts of try, catch, or finally block.
StatementAnalyzer_switch_statement=Selection must either cover whole switch statement or parts of a single case block.
StatementAnalyzer_synchronized_statement=Selection must either cover whole synchronized statement or parts of the synchronized block.

CodeAnalyzer_array_initializer=Operation not applicable to an array initializer.
JavaElementUtil_initializer=initializer

#######################################
# other
#######################################
CopyResourceString_copy=Copy resource ''{0}'' to ''{1}''

RenameAnalyzeUtil_shadows=Problem in ''{0}''. Another name will shadow access to the renamed element
RenameAnalyzeUtil_reference_shadowed=Problem in ''{0}''. The reference to ''{1}'' will be shadowed by a renamed declaration
CopyRefactoring_update_ref=Update type reference
CodeRefactoringUtil_error_message=The body of the method ''{0}'' cannot be analyzed because of compilation errors in that method. To perform the operation you will need to fix the errors.
InlineTemRefactoring_error_message_nulLiteralsCannotBeInlined=Null literals cannot be inlined
InlineTemRefactoring_error_message_fieldsCannotBeInlined=Cannot inline fields

HierarchyRefactoring_initializer=initializer
HierarchyRefactoring_add_member=Add member declaration
HierarchyRefactoring_remove_member=Remove member declaration
HierarchyRefactoring_does_not_exist=One of the elements does not exist in the saved version of the file
HierarchyRefactoring_gets_instantiated=Class ''{0}'' cannot be made abstract because it is instantiated
HierarchyRefactoring_interface_members=Members in interfaces cannot be moved.
HierarchyRefactoring_annotation_members=Members in annotations cannot be moved.
HierarchyRefactoring_enum_members=Members in enumerations cannot be moved.
HierarchyRefactoring_members_of_binary=Moving of members declared in binary types is not supported
HierarchyRefactoring_members_of_read_only=Moving of members declared in read-only types is not supported

PushDownRefactoring_name=Push Down
PushDownRefactoring_no_subclasses=Push Down is not allowed on type ''{0}'', since it does not have subclasses to which members could be pushed down.
PushDownRefactoring_category_name=Push Down Changes
PushDownRefactoring_make_abstract=Make type abstract
PushDownRefactoring_calculating_required=Calculating required members...
PushDownRefactoring_category_description=Changes to push down members
PushDownRefactoring_change_name=Push down
PushDownRefactoring_referenced=Pushed down member ''{0}'' is referenced by ''{1}''
PushDownRefactoring_check_references=Checking referenced elements...
PushDownRefactoring_type_not_accessible=Type ''{0}'' referenced in one of the pushed elements is not accessible from type ''{1}''
PushDownRefactoring_field_not_accessible=Field ''{0}'' referenced in one of the pushed elements is not accessible from type ''{1}''
PushDownRefactoring_method_not_accessible=Method ''{0}'' referenced in one of the pushed elements is not accessible from type ''{1}''
PushDownRefactoring_checking=Checking preconditions...
PushDownRefactoring_descriptor_description=Push down members from ''{0}''
PushDownRefactoring_pushed_members_pattern=Pushed members:
PushDownRefactoring_descriptor_description_full=Push down ''{0}'' from ''{1}''
PushDownRefactoring_descriptor_description_short_multi=Push down ''{0}''
PushDownRefactoring_descriptor_description_short=Push down

ChangeSignatureRefactoring_modify_Parameters=Change Method Signature
ChangeSignatureRefactoring_restructure_parameters=Change Method Signature
ChangeSignatureRefactoring_checking_preconditions=Checking preconditions...
ChangeSignatureRefactoring_descriptor_description=Change method ''{0}'' to ''{1}''
ChangeSignatureRefactoring_new_visibility_pattern=New visibility: ''{0}''
ChangeSignatureRefactoring_descriptor_description_short=Change method ''{0}''
ChangeSignatureRefactoring_method_deleted=The selected method has been deleted from ''{0}''.
ChangeSignatureRefactoring_native=Method ''{0}'' declared in type ''{1}'' is native. Reordering parameters will cause UnsatisfiedLinkError on runtime if you do not update your native libraries.
ChangeSignatureRefactoring_duplicate_name=Duplicate parameter name: ''{0}''.
ChangeSignatureRefactoring_return_type_contains_type_variable=The return type ''{0}'' contains the type variable ''{1}'', which may not be available in related methods.
ChangeSignatureRefactoring_method_name_not_empty=The method name cannot be empty.
ChangeSignatureRefactoring_default_value=Enter the default value for parameter ''{0}''.
ChangeSignatureRefactoring_default_visibility=(package)
ChangeSignatureRefactoring_invalid_expression=''{0}'' is not a valid expression.
ChangeSignatureRefactoring_parameter_type_contains_type_variable=The type ''{0}'' of parameter ''{1}'' contains the type variable ''{2}'', which may not be available in related methods.
ChangeSignatureRefactoring_old_and_new_signatures_not_sufficiently_different=The old and new method signatures do not differ sufficiently for creating a delegate method. Delegate will introduce compile errors.
ChangeSignatureRefactoring_unchanged=Method signature and return type are unchanged.
ChangeSignatureRefactoring_parameter_used=Removed parameter ''{0}'' is used in method ''{1}'' declared in type ''{2}''.
ChangeSignatureRefactoring_anonymous_subclass=anonymous subclass of ''{0}''
ChangeSignatureRefactoring_lambda_expression=lambda expression implemented in ''{0}''
ChangeSignatureRefactoring_removed_parameters=Removed parameters:
ChangeSignatureRefactoring_removed_exceptions=Removed exceptions:
ChangeSignatureRefactoring_non_virtual=Changing visibility to \'private\' will make this method non-virtual, which may affect the program\'s behavior.
ChangeSignatureRefactoring_already_has=Method ''{0}'' already has a parameter named ''{1}''.
ChangeSignatureRefactoring_preview=Preparing preview
ChangeSignatureRefactoring_constructor_name=The method should not have the same name as the declaring type.
ChangeSignatureRefactoring_no_exception_binding=Cannot resolve the type binding of a thrown exception. Compilation errors must be fixed before this refactoring can be performed.
ChangeSignatureRefactoring_param_name_not_empty=Enter the name for parameter {0}.
ChangeSignatureRefactoring_change_signature=Change signature
ChangeSignatureRefactoring_changed_parameters=Changed parameters:
ChangeSignatureRefactoring_update_reference=Update reference
ChangeSignatureRefactoring_new_name_pattern=New name: ''{0}''
ChangeSignatureRefactoring_update_parameter_references=Update parameter references
ChangeSignatureRefactoring_update_javadoc_reference=Update Javadoc reference
ChangeSignatureRefactoring_deleted_parameter_pattern={0} {1}
ChangeSignatureRefactoring_changed_parameter_pattern={0} {1}
ChangeSignatureRefactoring_new_return_type_pattern=New return type: ''{0}''
ChangeSignatureRefactoring_added_parameter_pattern={0} {1}
ChangeSignatureRefactoring_add_super_call=Add super constructor call
ChangeSignatureRefactoring_add_constructor=Add constructor
ChangeSignatureRefactoring_added_parameters=Added parameters:
ChangeSignatureRefactoring_added_exceptions=Added exceptions:
ChangeSignatureRefactoring_cannot_convert_vararg=The variable arity ellipsis (...) cannot be removed from the last parameter ''{0}''.
ChangeSignatureRefactoring_vararg_must_be_last=The variable arity parameter ''{0}'' cannot be followed by another parameter.
ChangeSignatureRefactoring_ripple_cannot_convert_vararg=The last parameter ''{0}'' must end with an ellipsis (...), since it is a variable arity parameter in type ''{1}''.

TypeContextChecker_couldNotResolveType=Could not resolve type ''{0}''.
TypeContextChecker_ambiguous=Parameter type name ''{0}'' is ambiguous. There are {1} types with that name.
TypeContextChecker_not_unique=Parameter type name ''{0}'' cannot be uniquely resolved or is not a valid type name.
TypeContextChecker_parameter_type=Enter the type for parameter ''{0}''.
TypeContextChecker_no_vararg_below_50=''{0}'' is not a valid parameter type; variable arity parameters are only supported if the source level is 1.5.
TypeContextChecker_invalid_type_name=''{0}'' is not a valid parameter type.
TypeContextChecker_invalid_type_syntax=''{0}'' is not a valid parameter type: {1}.
TypeContextChecker_return_type_not_empty=The return type cannot be empty.
TypeContextChecker_invalid_return_type=''{0}'' is not a valid return type.
TypeContextChecker_invalid_return_type_syntax=''{0}'' is not a valid return type: {1}.

MoveInnerToTopRefactoring_names_start_lowercase=This name is discouraged. According to convention, names of instance fields and local variables start with a lowercase letter.
MoveInnerToTopRefactoring_already_declared=A field named ''{0}'' is already declared in type ''{1}''
MoveInnerToTopRefactoring_compilation_Unit_exists=A compilation unit named ''{0}'' already exists in package ''{1}''
MoveInnerToTopRefactoring_name_used=Name ''{0}'' is used as a parameter name in one of the constructors of type ''{1}''
MoveInnerToTopRefactoring_name=Move Type to New File
MoveInnerToTopRefactoring_creating_change=Creating change
MoveInnerToTopRefactoring_update_type_reference=Update type reference
MoveInnerToTopRefactoring_descriptor_description=Move type ''{0}'' in ''{1}'' to new file
MoveInnerToTopRefactoring_descriptor_description_short=Move type ''{0}'' to new file
MoveInnerToTopRefactoring_update_constructor_reference=Update constructor occurrence
MoveInnerToTopRefactoring_move_to_Top=Move Type to New File
MoveInnerToTopRefactoring_parameter_pattern=Parameter name: ''{0}''
MoveInnerToTopRefactoring_change_visibility_type_warning=The visibility of type ''{0}'' will be changed to package.
MoveInnerToTopRefactoring_change_qualifier=Qualify class name
MoveInnerToTopRefactoring_type_exists=Type named ''{0}'' already exists in package ''{1}''

UseSupertypeWherePossibleRefactoring_name=Use Supertype Where Possible
UseSuperTypeProcessor_name=Use Supertype
UseSuperTypeProcessor_internal_error=Internal error during precondition checking. Consult log for detailed error description.
UseSuperTypeProcessor_descriptor_description=Use super type ''{0}'' instead of ''{1}''
UseSuperTypeProcessor_descriptor_description_short=Use super type ''{0}''
UseSuperTypeProcessor_refactored_element_pattern=Super type: ''{0}''
UseSuperTypeProcessor_creating=Checking preconditions...
UseSuperTypeProcessor_checking=Checking preconditions...

SuperTypeRefactoringProcessor_creating=Checking preconditions...
SuperTypeRefactoringProcessor_category_name=Use Supertype Changes
SuperTypeRefactoringProcessor_update_type_occurrence=Update type occurrence
SuperTypeRefactoringProcessor_user_supertype_setting=Use super type where possible
SuperTypeRefactoringProcessor_use_in_instanceof_setting=Use super type in 'instanceof' expressions
SuperTypeRefactoringProcessor_category_description=Changes to replace type by supertype

MoveInstanceMethodRefactoring_name=Move Method
MoveInstanceMethodProcessor_name= Move Method
MoveInstanceMethodProcessor_no_static_methods=This refactoring cannot be used to move static methods.
MoveInstanceMethodProcessor_single_implementation=This refactoring cannot be used to move abstract methods.
MoveInstanceMethodProcessor_no_native_methods=This refactoring cannot be used to move native methods.
MoveInstanceMethodProcessor_no_synchronized_methods=This refactoring cannot be used to move synchronized methods.
MoveInstanceMethodProcessor_no_constructors=This refactoring cannot be used to move a constructor.
MoveInstanceMethodProcessor_uses_super=The method cannot be moved, since it uses the 'super' keyword.
MoveInstanceMethodProcessor_refers_enclosing_instances=The method cannot be moved, since it has references to enclosing instances.
MoveInstanceMethodProcessor_potentially_recursive=This refactoring cannot be used to move potentially recursive methods.
MoveInstanceMethodProcessor_cannot_be_moved=This method cannot be moved, since no possible targets have been found.\n\nOnly a class which is reachable from within this method can be a valid target. The target must therefore be the declaring class of a parameter or field type. In addition the target must be writable.
MoveInstanceMethodProcessor_no_type_variables=This method cannot be moved, since it contains references to non-local type parameters.
MoveInstanceMethodProcessor_no_generic_targets=This method cannot be moved to the specified target, since the target is a generic entity.
MoveInstanceMethodProcessor_no_binary=Cannot move methods to binary types.
MoveInstanceMethodProcessor_no_interface=This refactoring cannot be used to move interface methods.
MoveInstanceMethodProcessor_no_annotation=This refactoring cannot be used to move annotation methods.
MoveInstanceMethodProcessor_this_reference=A reference to 'this' has been found
MoveInstanceMethodProcessor_no_resolved_target=The target of the method could not be resolved.
MoveInstanceMethodProcessor_no_null_argument=The method invocation ''{0}'' cannot be updated, since it uses null as argument.
MoveInstanceMethodProcessor_target_name_already_used=The name of the target conflicts with the method parameter ''{0}''.
MoveInstanceMethodProcessor_target_element_pattern=Target element: ''{0}''
MoveInstanceMethodProcessor_present_type_parameter_warning=The type parameter ''{0}'' is already present in the target type ''{1}'' and will be removed from the method.
MoveInstanceMethodProcessor_remove_original_method=Remove method declaration
MoveInstanceMethodProcessor_inline_method_invocation=Update method invocation
MoveInstanceMethodProcessor_add_moved_method=Add method declaration
MoveInstanceMethodProcessor_descriptor_description=Move method ''{0}'' to ''{1}''
MoveInstanceMethodProcessor_parameter_name_pattern=Parameter name: ''{0}''
MoveInstanceMethodProcessor_descriptor_description_short=Move method ''{0}''
MoveInstanceMethodProcessor_inline_inaccurate=A method invocation to the original method in ''{0}'' could not be fully resolved.
MoveInstanceMethodProcessor_inline_overridden=The method invocations to ''{0}'' cannot be updated, since the original method is used polymorphically.
MoveInstanceMethodProcessor_method_already_exists=A method with name ''{0}'' already exists in the target type ''{1}''.
MoveInstanceMethodProcessor_moved_element_pattern=Moved method: {0}
MoveInstanceMethodProcessor_method_type_clash=The method cannot have the same name as its target type ''{0}''.
MoveInstanceMethodProcessor_method_name_pattern=Method name: ''{0}''
MoveInstanceMethodProcessor_creating=Checking preconditions...
MoveInstanceMethodProcessor_checking=Checking preconditions...

ExtractInterfaceRefactoring_name=Extract Interface
ExtractInterfaceProcessor_name= Extract Interface
ExtractInterfaceProcessor_no_binary=Cannot extract interfaces from binary types.
ExtractInterfaceProcessor_no_annotation=Cannot extract interfaces from annotations.
ExtractInterfaceProcessor_no_anonymous=Cannot extract interfaces from anonymous types.
ExtractInterfaceProcessor_add_comment=Add method comment
ExtractInterfaceProcessor_existing_type=A type named ''{0}'' already exists in package ''{1}''
ExtractInterfaceProcessor_category_name=Extract Interface Changes
ExtractInterfaceProcessor_existing_default_type=A type named ''{0}'' already exists in the default package
ExtractInterfaceProcessor_category_description=Changes to extract the new interface
ExtractInterfaceProcessor_remove_field_label=Remove field declaration
ExtractInterfaceProcessor_remove_method_label=Remove method declaration
ExtractInterfaceProcessor_add_super_interface=Add super interface
ExtractInterfaceProcessor_descriptor_description=Extract interface ''{0}'' from ''{1}''
ExtractInterfaceProcessor_description_descriptor_short=Extract interface ''{0}''
ExtractInterfaceProcessor_existing_compilation_unit=A compilation unit named ''{0}'' already exists in package ''{1}''
ExtractInterfaceProcessor_extracted_members_pattern=Extracted members:
ExtractInterfaceProcessor_refactored_element_pattern=Extracted interface: ''{0}''
ExtractInterfaceProcessor_internal_error=An internal error occurred during precondition checking. See the error log for more details.
ExtractInterfaceProcessor_rewrite_comment=Rewrite method comment
ExtractInterfaceProcessor_creating=Checking preconditions...
ExtractInterfaceProcessor_checking=Checking preconditions...

#Begin - Do not remove
MemberVisibilityAdjustor_change_visibility_type_warning=The visibility of type ''{0}'' will be changed to {1}.
MemberVisibilityAdjustor_change_visibility_method_warning=The visibility of method ''{0}'' will be changed to {1}.
MemberVisibilityAdjustor_change_visibility_field_warning=The visibility of field ''{0}'' will be changed to {1}.
#End - Do not remove
MemberVisibilityAdjustor_change_visibility_default=package
MemberVisibilityAdjustor_change_visibility_public=public
MemberVisibilityAdjustor_change_visibility_protected=protected
MemberVisibilityAdjustor_change_visibility_private=private
MemberVisibilityAdjustor_change_visibility=Change visibility to {0}

MemberVisibilityAdjustor_adjusting=Adjusting visibility...
MemberVisibilityAdjustor_checking=Checking visibility...

MemberVisibilityAdjustor_adjustments_name=Visibility Changes
MemberVisibilityAdjustor_adjustments_description=Changes to adjust the visibility of elements

CopyPackageFragmentRootChange_copy=Copy source folder ''{0}'' to ''{1}''

DeletePackageFragmentRootChange_delete=Delete source folder ''{0}''
DeletePackageFragmentRootChange_restore_file=Restore file ''{0}''

DelegateCreator_use_member_instead=Use {0} instead
DelegateCreator_change_category_title=Keep Original Method Changes
DelegateCreator_change_category_description=Changes to keep the original member as delegate to new member
DelegateCreator_keep_original_changed_plural=&Keep original methods as delegates to changed methods
DelegateCreator_cannot_create_field_delegate_not_final=Cannot create delegate for field ''{0}'' - field is not final.
DelegateCreator_cannot_create_field_delegate_no_initializer=Cannot create delegate for field ''{0}'' - not initializer found.
DelegateCreator_cannot_create_field_delegate_more_than_one_fragment=Cannot add delegate for field ''{0}'' - more than one fragment in this declaration.
DelegateCreator_cannot_create_delegate_for_type=Cannot create a delegate for type ''{0}'' - delegate creation is not available for types.
DelegateCreator_keep_original_changed_singular=&Keep original method as delegate to changed method

DelegateMethodCreator_text_edit_group_field=Keep original method as delegate
DelegateMethodCreator_keep_original_renamed_plural=&Keep original methods as delegates to renamed methods
DelegateMethodCreator_keep_original_moved_plural=&Keep original methods as delegates to moved methods
DelegateMethodCreator_keep_original_moved_singular=&Keep original method as delegate to moved method
DelegateMethodCreator_keep_original_moved_plural_member=&Keep original members as delegates to moved members
DelegateMethodCreator_keep_original_moved_singular_member=&Keep original member as delegate to moved member
DelegateMethodCreator_keep_original_renamed_singular=&Keep original method as delegate to renamed method
DelegateFieldCreator_text_edit_group_label=Keep original field as delegate
DelegateFieldCreator_keep_original_renamed_plural=&Keep original fields as delegates to renamed fields
DelegateFieldCreator_keep_original_renamed_singular=&Keep original field as delegate to renamed field

MovePackageFragmentRootChange_move=Move Package Fragment Root ''{0}'' to ''{1}''

PromoteTempToFieldRefactoring_name=Convert Local Variable to Field
PromoteTempToFieldRefactoring_select_declaration=Select a declaration or a reference to a local variable.
PromoteTempToFieldRefactoring_default_visibility=(package)
PromoteTempToFieldRefactoring_visibility_pattern=Declared visibility: ''{0}''
PromoteTempToFieldRefactoring_only_declared_in_methods=Only local variables declared in methods can be converted to fields.
PromoteTempToFieldRefactoring_method_parameters=Cannot convert method parameters to fields.
PromoteTempToFieldRefactoring_original_pattern=Original element: ''{0}''
PromoteTempToFieldRefactoring_initialize_method=Initialize field in method
PromoteTempToFieldRefactoring_exceptions=Cannot convert exceptions declared in catch clauses to fields.
PromoteTempToFieldRefactoring_cannot_promote=Cannot convert this local variable to a field.
PromoteTempToFieldRefactoring_declare_static=Declare field 'static'
PromoteTempToFieldRefactoring_uses_type_declared_locally=Cannot convert this local variable to a field because it uses a type declared locally in the method.
PromoteTempToFieldRefactoring_Name_conflict=Name conflict with name ''{0}'' used in ''{1}''
PromoteTempToFieldRefactoring_field_pattern=Field name: ''{0}''
PromoteTempToFieldRefactoring_declare_final=Declare field 'final'
PromoteTempToFieldRefactoring_Name_conflict_with_field=Name conflict with existing field
PromoteTempToFieldRefactoring_descriptor_description=Convert local variable ''{0}'' in ''{1}'' to field
PromoteTempToFieldRefactoring_descriptor_description_short=Convert local variable ''{0}'' to field
PromoteTempToFieldRefactoring_initialize_constructor=Initialize field in class constructor
PromoteTempToFieldRefactoring_initialize_declaration=Initialize field in declaration
PromoteTempToFieldRefactoring_interface_methods=Cannot convert local variables declared in interface methods to fields.
PromoteTempToFieldRefactoring_declare_final_static=Declare field 'final' and 'static'
PromoteTempToFieldRefactoring_editName=Convert local variable to field

ConvertAnonymousToNestedRefactoring_name=Convert Anonymous Class to Nested
ConvertAnonymousToNestedRefactoring_place_caret=Place the caret inside an anonymous class.
ConvertAnonymousToNestedRefactoring_type_exists=Nested type with that name already exists.
ConvertAnonymousToNestedRefactoring_another_name=Choose another name.
ConvertAnonymousToNestedRefactoring_name_hides=Class name hides an enclosing type name.
ConvertAnonymousToNestedRefactoring_compile_errors=This refactoring cannot be performed due to compile errors in the compilation unit. To perform this operation you will need to fix the errors.
ConvertAnonymousToNestedRefactoring_declare_final=Declare class \'final\'
ConvertAnonymousToNestedRefactoring_declare_static=Declare class \'static\'
ConvertAnonymousToNestedRefactoring_anonymous_field_access=Class accesses fields in enclosing anonymous type. The refactored code will not compile.
ConvertAnonymousToNestedRefactoring_descriptor_description=Convert anonymous class ''{0}'' in ''{1}'' to nested class
ConvertAnonymousToNestedRefactoring_descriptor_description_short=Convert anonymous class to nested
ConvertAnonymousToNestedRefactoring_declare_final_static=Declare class \'final\' and \'static\'
ConvertAnonymousToNestedRefactoring_extends_local_class=Cannot convert this anonymous class to a nested class since it extends a local class.
ConvertAnonymousToNestedRefactoring_class_name_pattern=Class name: ''{0}''
ConvertAnonymousToNestedRefactoring_visibility_pattern=Declared visibility: ''{0}''
ConvertAnonymousToNestedRefactoring_default_visibility=(package)
ConvertAnonymousToNestedRefactoring_original_pattern=Original element: ''{0}''

InlineConstantRefactoring_Inline=Inline Constant
InlineConstantRefactoring_syntax_errors=This file contains syntax errors. To perform this operation you will need to fix the errors.
InlineConstantRefactoring_local_anonymous_unsupported=Inlining of constants defined in local or anonymous classes is not supported.
InlineConstantRefactoring_static_final_field=A static final field must be selected.
InlineConstantRefactoring_blank_finals=Inline Constant cannot inline blank finals.
InlineConstantRefactoring_binary_file=Cannot inline this constant, since it is declared in a binary file.
InlineConstantRefactoring_preview=Generating preview ...
InlineConstantRefactoring_inline=Inline Constant
InlineConstantRefactoring_remove_declaration=Remove constant declaration
InlineConstantRefactoring_original_pattern=Original element: ''{0}''
InlineConstantRefactoring_replace_references=Replace all references to constant with expression
InlineConstantRefactoring_name=Inline Constant
InlineConstantRefactoring_descriptor_description=Inline constant ''{0}'' in ''{1}''
InlineConstantRefactoring_descriptor_description_short=Inline constant ''{0}''

DeleteSourceManipulationChange_0=Delete ''{0}''

JavaCopyProcessor_changeName=Copy
JavaMoveProcessor_change_name=Move
JavaCopyProcessor_processorName=Copy

MoveRefactoring_0=Move

OverwriteHelper_0=Confirm Overwriting
OverwriteHelper_1=''{0}'' exists in the selected destination. Do you want to overwrite?

OverwriteHelper_2=Element Exists in Destination
OverwriteHelper_3=The element ''{0}'' exists in the selected destination. You can either skip the conflicting element, skip all conflicting elements, or cancel the whole operation.

ReadOnlyResourceFinder_0=Confirm Delete of Read-Only Elements
ReadOnlyResourceFinder_1=The selected elements contain read-only resources. Do you still want to delete them?
ReadOnlyResourceFinder_2=Confirm Move of Read-Only Elements
ReadOnlyResourceFinder_3=The selected elements contain read-only resources. Do you still want to move them?

MoveInnerToTopRefactoring_creating_preview=Creating preview
MoveInnerToTopRefactoring_original_pattern=Original element: ''{0}''
MoveInnerToTopRefactoring_change_label=Move Type to New File
MoveInnerToTopRefactoring_field_pattern=Field name: ''{0}''
MoveInnerToTopRefactoring_declare_final=Declare field 'final'

# ---- Reorg
ReorgPolicy_copy=Copy Resources
ReorgPolicy_copy_source_folder=Copy Source Folders
ReorgPolicy_copy_package=Copy Packages
ReorgPolicy_move_source_folder=Move Source Folders
ReorgPolicy_move_package=Move Packages
ReorgPolicy_move=Move Resources
ReorgPolicy_move_members=Move Elements
ReorgPolicyFactory_doesnotexist0=The selected element cannot be the destination of this operation
ReorgPolicyFactory_readonly=The selected destination is read-only
ReorgPolicyFactory_structure=The structure of the selected destination is not known
ReorgPolicyFactory_inconsistent=The selected destination is not consistent with its underlying resource or buffer
ReorgPolicyFactory_archive=The selected destination is an archive
ReorgPolicyFactory_external=The selected destination is external to the workbench
ReorgPolicyFactory_phantom=The selected destination does not exist or is a phantom resource
ReorgPolicyFactory_inaccessible=The selected destination is not accessible
ReorgPolicyFactory_not_this_resource=The selected resource cannot be used as a destination
ReorgPolicyFactory_no_java_element=A Java element cannot be the destination for the selected elements.
ReorgPolicyFactory_copy_roots_plural=Copy source folders
ReorgPolicyFactory_copy_roots_header_singular=Copy source folder ''{0}'' to ''{1}''
ReorgPolicyFactory_copy_roots_header_plural=Copy {0} source folders to ''{1}''
ReorgPolicyFactory_copy_initializers=Copy initializers
ReorgPolicyFactory_copy_initializer=Copy initializer
ReorgPolicyFactory_move_roots_plural=Move source folders
ReorgPolicyFactory_move_roots_header_singular=Move source folder ''{0}'' to ''{1}''
ReorgPolicyFactory_move_roots_header_plural=Move {0} source folders to ''{1}''
ReorgPolicyFactory_move_initializers=Move initializers
ReorgPolicyFactory_move_initializer=Move initializer
ReorgPolicyFactory_copy_description_plural=Copy elements
ReorgPolicyFactory_copy_roots_singular=Copy source folder
ReorgPolicyFactory_copy_import_section=Copy import section
ReorgPolicyFactory_copy_packages_plural=Copy packages
ReorgPolicyFactory_copy_package_singular=Copy package
ReorgPolicyFactory_copy_package_declarations=Copy package declarations
ReorgPolicyFactory_copy_compilation_unit=Copy compilation unit
ReorgPolicyFactory_copy_elements_singular=Copy element
ReorgPolicyFactory_copy_compilation_units=Copy compilation units
ReorgPolicyFactory_copy_import_containers=Copy import sections
ReorgPolicyFactory_copy_packages_header_singular=Copy package ''{0}'' to ''{1}''
ReorgPolicyFactory_copy_packages_header_plural=Copy {0} packages to ''{1}''
ReorgPolicyFactory_copy_elements_plural=Copy elements
ReorgPolicyFactory_copy_elements_header_singular=Copy element ''{0}'' to ''{1}''
ReorgPolicyFactory_copy_elements_header_plural=Copy {0} elements to ''{1}''
ReorgPolicyFactory_copy_description_singular=Copy element
ReorgPolicyFactory_cannot_move_source_to_parent=A source folder cannot be moved to its own parent.
ReorgPolicyFactory_cannot_move_package_to_parent=A package cannot be moved to its own parent.
ReorgPolicyFactory_move_description_plural=Move elements
ReorgPolicyFactory_move_import_declaration=Move import declaration
ReorgPolicyFactory_move_packages_singular=Move package
ReorgPolicyFactory_move_package_declarations=Move package declarations
ReorgPolicyFactory_move_package_declaration=Move package declaration
ReorgPolicyFactory_move_elements_singular=Move element
ReorgPolicyFactory_move_compilation_units=Move compilation units
ReorgPolicyFactory_move_import_containers=Move import sections
ReorgPolicyFactory_invalidDestinationKind=The selected element cannot be the destination of this operation.
ReorgPolicyFactory_move_roots_singular=Move source folder
ReorgPolicyFactory_move_import_section=Move import section
ReorgPolicyFactory_move_packages_plural=Move packages
ReorgPolicyFactory_move_packages_header_singular=Move package ''{0}'' to ''{1}''
ReorgPolicyFactory_move_packages_header_plural=Move {0} packages to ''{1}''
ReorgPolicyFactory_move_elements_plural=Move elements
ReorgPolicyFactory_move_elements_header_singular=Move element ''{0}'' to ''{1}''
ReorgPolicyFactory_move_elements_header_plural=Move {0} elements to ''{1}''
ReorgPolicyFactory_move_compilation_unit=Move compilation unit
ReorgPolicyFactory_move_description_singular=Move element
ReorgPolicyFactory_move_import_declarations=Move import declarations
ReorgPolicyFactory_linked=Linked resources can only be copied to projects
ReorgPolicyFactory_no_resource=A resource cannot be the destination for the selected elements.
ReorgPolicyFactory_copy_header_singular=Copy element ''{0}'' to ''{1}''
ReorgPolicyFactory_copy_header_plural=Copy {0} elements to ''{1}''
ReorgPolicyFactory_copy_folders=Copy folders
ReorgPolicyFactory_copy_methods=Copy methods
ReorgPolicyFactory_copy_imports=Copy import declarations
ReorgPolicyFactory_copy_package=Copy package declaration
ReorgPolicyFactory_copy_files=Copy files
ReorgPolicyFactory_copy_types=Copy types
ReorgPolicyFactory_copy_field=Copy field
ReorgPolicyFactory_copy_folder=Copy folder
ReorgPolicyFactory_copy_fields=Copy fields
ReorgPolicyFactory_copy_method=Copy method
ReorgPolicyFactory_copy_import=Copy import declaration
ReorgPolicyFactory_copy_file=Copy file
ReorgPolicyFactory_copy_type=Copy type
ReorgPolicyFactory_move_header_singular=Move element ''{0}'' to ''{1}''
ReorgPolicyFactory_move_header_plural=Move {0} elements to ''{1}''
ReorgPolicyFactory_move_folders=Move folders
ReorgPolicyFactory_move_methods=Move methods
ReorgPolicyFactory_move_files=Move files
ReorgPolicyFactory_move_types=Move types
ReorgPolicyFactory_move_field=Move field
ReorgPolicyFactory_move_folder=Move folder
ReorgPolicyFactory_move_fields=Move fields
ReorgPolicyFactory_move_method=Move method
ReorgPolicyFactory_move_file=Move file
ReorgPolicyFactory_move_type=Move type
ReorgPolicyFactory_doesnotexist1=The selected element cannot be the destination for this operation
ReorgPolicyFactory_cannot_modify=The selected destination element cannot be modified
ReorgPolicyFactory_cannot=The selected element cannot be the destination for this operation
ReorgPolicyFactory_package_decl=Package declarations are not available as destinations
ReorgPolicyFactory_src2proj=Source folders can only be copied to Java projects
ReorgPolicyFactory_jmodel=The Java Model cannot be the destination of this operation
ReorgPolicyFactory_src2writable=Source folders cannot be copied to read-only elements
ReorgPolicyFactory_src2nosrc=Source folders cannot be copied or moved to projects that contain no source folders
ReorgPolicyFactory_packages=Packages can only be moved or copied to source folders or Java projects that do not have source folders
ReorgPolicyFactory_cannot1=The selected element cannot be the destination of this operation
ReorgPolicyFactory_noCopying=Copying is not available
ReorgPolicyFactory_noJavaUpdates=Java references will not be updated.
ReorgPolicyFactory_element2parent=Elements cannot be moved to their own parents.
ReorgPolicyFactory_package2parent=A package cannot be moved to its own parent.
ReorgPolicyFactory_parent=A file or folder cannot be moved to its own parent.
ReorgPolicyFactory_noMoving=Moving is not available

ReorgUtils_0=file ''{0}''
ReorgUtils_1=folder ''{0}''
ReorgUtils_2=project ''{0}''
ReorgUtils_3=class file ''{0}''
ReorgUtils_4=file ''{0}''
ReorgUtils_5=field ''{0}''
ReorgUtils_6=the import container
ReorgUtils_7=import declaration ''{0}''
ReorgUtils_8=the initializer
ReorgUtils_9=Java project ''{0}''
ReorgUtils_10=constructor ''{0}''
ReorgUtils_11=method ''{0}''
ReorgUtils_12=package declaration ''{0}''
ReorgUtils_13=the default package
ReorgUtils_14=package ''{0}''
ReorgUtils_15=source folder ''{0}''
ReorgUtils_16=class folder ''{0}''
ReorgUtils_17=package fragment root ''{0}''
ReorgUtils_18=type ''{0}''
ReorgUtils_20=anonymous type ''{0}''
ReorgUtils_21=archive ''{0}''
DeleteChangeCreator_1=Delete elements

DeleteRefactoring_1=Analyzing...
DeleteRefactoring_2=Confirm Referenced Archive Delete
DeleteRefactoring_3_singular=Archive file ''{0}'' is referenced by the following project. Do you still want to delete it?
DeleteRefactoring_3_plural=Archive file ''{0}'' is referenced by the following projects. Do you still want to delete it?
DeleteRefactoring_4=Confirm Folder Delete
DeleteRefactoring_5=Folder ''{0}'' contains a Java source folder. Deleting it will delete the source folder as well. Do you still wish to delete it?
DeleteRefactoring_7=Delete
DeleteRefactoring_8=Confirm Delete of Getters/Setters
DeleteRefactoring_9=Do you also want to delete getter/setter methods for field ''{0}''?
JavaDeleteProcessor_unsaved_changes= File ''{0}'' has unsaved changes.
JavaDeleteProcessor_creating_change=Creating change...
JavaDeleteProcessor_description_singular=Delete element
JavaDeleteProcessor_description_plural=Delete elements
JavaDeleteProcessor_project_pattern=project ''{0}''
JavaDeleteProcessor_workspace=workspace
JavaDeleteProcessor_header_singular=Delete element from {0}
JavaDeleteProcessor_header_plural=Delete {0} elements from {1}
JavaDeleteProcessor_delete_subpackages=Delete subpackages
JavaDeleteProcessor_delete_accessors=Delete getters and setters
JavaDeleteProcessor_confirm_linked_folder_delete=Confirm Linked Folder Delete
JavaDeleteProcessor_delete_linked_folder_question=Are you sure you want to delete the linked package ''{0}''?\nOnly the workspace link will be deleted. Link target will remain unchanged.

JavaRefactoringDescriptor_update_references=Update references to refactored element
JavaRefactoringDescriptor_rename_similar=Rename similarly named elements
JavaRefactoringDescriptor_qualified_names=Update fully qualified names in non-Java files
JavaRefactoringDescriptor_keep_original=Keep original element as delegate to refactored element
JavaRefactoringDescriptor_not_available=N/A
JavaRefactoringDescriptor_rename_similar_suffix=Rename similarly named elements, also find name suffixes
JavaRefactoringDescriptor_textual_occurrences=Update textual occurrences in comments and strings
JavaRefactoringDescriptor_inferred_setting_pattern=- {0}
JavaRefactoringDescriptor_original_element_pattern=Original element: ''{0}''
JavaRefactoringDescriptor_original_elements=Original elements:
JavaRefactoringDescriptor_renamed_element_pattern=Renamed element: ''{0}''
JavaRefactoringDescriptor_rename_similar_embedded=Rename similarly named elements, also find embedded names
JavaRefactoringDescriptor_qualified_names_pattern=Update fully qualified names in ''{0}'' files
JavaRefactoringDescriptor_keep_original_deprecated=Keep original element as deprecated delegate to refactored element
JavaRefactoringDescriptorComment_element_delimiter=\ \ \ \ \ 
JavaRefactoringDescriptorComment_textual_move_only=Textual move only
JavaRefactoringDescriptorComment_destination_pattern=Destination element: ''{0}''
JavaRefactoringDescriptorComment_original_project=- Original project: ''{0}''

MoveStaticMemberAnalyzer_nonStatic=Replacing non-static access to static member with static access
MoveStaticMembersProcessor_descriptor_description_single=Move ''{0}'' to ''{1}''
MoveStaticMembersProcessor_description_descriptor_short_multi=Move member ''{0}''
MoveStaticMembersProcessor_descriptor_description_multi=Move {0} members to ''{1}''
MoveStaticMembersProcessor_target_element_pattern=Destination type: ''{0}''

#
# Introduce Factory
IntroduceFactory_name=Introduce Factory
IntroduceFactory_checkingActivation=Checking preconditions...
IntroduceFactory_syntaxError=Syntax errors in compilation unit; unable to proceed.
IntroduceFactory_checking_preconditions=Checking preconditions...
IntroduceFactory_examiningSelection=Examining selection...
IntroduceFactory_notAConstructorInvocation=Selected entity is not a constructor invocation or definition.
#
IntroduceFactory_noASTNodeForConstructorSearchHit=Cannot find AST node for constructor search hit @ [''{0}'', ''{1}'']: <''{2}''> in compilation unit ''{3}''
IntroduceFactory_unexpectedInitializerNodeType=Unexpected AST node type for initializer when searching for constructor call: ''{0}'' in compilation unit ''{1}''
IntroduceFactory_noConstructorCallNodeInsideFoundVarbleDecl=Could not find AST node for constructor call inside ''{0}''
IntroduceFactoryRefactoring_descriptor_description_short=Introduce factory for ''{0}''
IntroduceFactoryRefactoring_replaceJavadocReference=Replace constructor reference with reference to factory method
IntroduceFactory_unexpectedASTNodeTypeForConstructorSearchHit=Unexpected AST node type for constructor search hit: ''{0}'' in compilation unit ''{1}''
IntroduceFactory_noBindingForSelectedConstructor=Could not resolve binding of selected constructor; possibly a reference to an unknown type.
#
IntroduceFactory_addFactoryMethod=Add factory method
IntroduceFactory_replaceCalls=Replace constructor calls with calls to factory method
IntroduceFactory_protectConstructor=Protect constructor
#
IntroduceFactory_unsupportedNestedTypes=Introduce Factory does not support constructors on nested types.
IntroduceFactory_duplicateMethodName=Method ''{0}'' already exists.
IntroduceFactory_createChanges=Creating changes...
IntroduceFactory_constructorInBinaryClass=Introduce Factory is not supported when the constructor is in a binary class.
IntroduceFactoryRefactoring_owner_pattern=Owner class: ''{0}''
IntroduceFactory_unableToResolveConstructorBinding=Unable to resolve call target; check for possible compilation errors
IntroduceFactory_callSitesInBinaryClass=Constructor call sites in binary classes cannot be replaced by factory method calls.
IntroduceFactory_descriptor_description=Introduce factory ''{0}'' in ''{1}'' for constructor ''{2}''
IntroduceFactory_noSuchClass=Class ''{0}'' does not exist.
IntroduceFactory_cantPutFactoryMethodOnInterface=Cannot place factory method on an interface
IntroduceFactory_cantPutFactoryMethodOnAnnotation=Cannot place factory method on an annotation
IntroduceFactory_cantCheckForInterface=Unable to determine whether factory type is an interface
IntroduceFactory_cantPutFactoryInBinaryClass=Cannot place factory inside binary class
IntroduceFactoryRefactoring_original_pattern=Original element: ''{0}''
IntroduceFactoryRefactoring_factory_pattern=Factory name: ''{0}''
IntroduceFactoryRefactoring_declare_private=Declare original constructor 'private'
IntroduceFactory_constructorInEnum=Introduce Factory is not supported for constructors of enumerated types.
IntroduceFactory_abstractClass=Anonymous class will be created within the factory method.

#--- Generalize Declared Type
ChangeTypeRefactoring_checking_preconditions=Checking preconditions...
ChangeTypeRefactoring_name=Generalize Declared Type
ChangeTypeRefactoring_notSupportedOnNodeType=Generalize Declared Type is only supported on declarations of variables, parameters, and fields, and on method return types.
ChangeTypeRefactoring_notSupportedOnBinary=Generalize Declared Type is not allowed on return types and parameters of methods that override binary methods.
ChangeTypeRefactoring_invalidSelection=Invalid selection for Generalize Declared Type.
ChangeTypeRefactoring_multiDeclarationsNotSupported=Multi-declarations currently not handled.
ChangeTypeRefactoring_noMatchingConstraintVariable=No constraint variable matches the selected ASTNode.
ChangeTypeRefactoring_original_element_pattern=Original element: ''{0}''
ChangeTypeMessages_CreateChangesForChangeType=Creating changes for Generalize Declared Type...
ChangeTypeRefactoring_arraysNotSupported=Generalize Declared Type is not supported on array types.
ChangeTypeRefactoring_localTypesNotSupported=Generalize Declared Type is not supported on local types.
ChangeTypeRefactoring_primitivesNotSupported=Generalize Declared Type is not supported on primitive types.
ChangeTypeRefactoring_descriptor_description=Generalize declared type of ''{0}'' to ''{1}''
ChangeTypeRefactoring_original_type_pattern=Original type: ''{0}''
ChangeTypeRefactoring_refactored_type_pattern=Refactored type: ''{0}''
ChangeTypeRefactoring_descriptor_description_short=Generalize declared type
ChangeTypeRefactoring_typeChange=Change declared type from ''{0}'' to ''{1}''
ChangeTypeRefactoring_allChanges=Generalize Declared Type
ChangeTypeRefactoring_analyzingMessage=Analyzing...
ChangeTypeRefactoring_no_method=Selection cannot be mapped to a method
ChangeTypeRefactoring_no_filed=Selection cannot be mapped to a field
ChangeTypeRefactoring_insideLocalTypesNotSupported=Generalize Declared Type is currently not supported inside local types.
ChangeTypeRefactoring_typeParametersNotSupported=Generalize Declared Type is not supported on type parameters.
ChangeTypeRefactoring_enumsNotSupported=Generalize Declared Type is not supported on enumerated types.
ChangeTypeRefactoring_uniontypeNotSupported=Generalize Declared Type is not supported on union types.

#--- Introduce Indirection
IntroduceIndirectionRefactoring_introduce_indirection_name=Introduce Indirection
IntroduceIndirectionRefactoring_duplicate_method_name_in_declaring_type_error=Duplicate method name ''{0}'' in declaring type
IntroduceIndirectionRefactoring_could_not_parse_declaring_type_error=Could not parse declaring type.
IntroduceIndirectionRefactoring_type_does_not_exist_error=Type ''{0}'' does not exist.
IntroduceIndirectionRefactoring_type_not_selected_error=Please select a declaring type.
IntroduceIndirectionRefactoring_cannot_create_in_annotation=Cannot place new method on an annotation.
IntroduceIndirectionRefactoring_cannot_create_on_interface=Cannot place new method on an interface.
IntroduceIndirectionRefactoring_unable_determine_declaring_type=Unable to determine whether declaring type is an interface.
IntroduceIndirectionRefactoring_cannot_create_in_readonly=Cannot place new method in a read-only type.
IntroduceIndirectionRefactoring_cannot_create_in_binary=Cannot place new method in a binary type.
IntroduceIndirectionRefactoring_checking_activation=Checking activation of Introduce Indirection...
IntroduceIndirectionRefactoring_not_available_on_this_selection=Introduce Indirection is not available on this selection. Select a method invocation or a method declaration.
IntroduceIndirectionRefactoring_not_available_on_annotation=Introduce Indirection is not supported on annotation types.
IntroduceIndirectionRefactoring_not_available_for_local_or_anonymous_types=Introduce Indirection is not supported on methods inside local or anonymous types.
IntroduceIndirectionRefactoring_not_available_for_constructors=Introduce Indirection is not available for constructors.
IntroduceIndirectionRefactoring_checking_conditions=Checking preconditions...
IntroduceIndirectionRefactoring_method_pattern=Method name: ''{0}''
IntroduceIndirectionRefactoring_declaring_pattern=Declaring type: ''{0}''
IntroduceIndirectionRefactoring_cannot_create_in_nested_nonstatic=Cannot create a static method in a nested non-static type.
IntroduceIndirectionRefactoring_looking_for_references=Looking for references...
IntroduceIndirectionRefactoring_descriptor_description=Introduce indirection for ''{0}'' in ''{1}''
IntroduceIndirectionRefactoring_descriptor_description_short=Introduce indirection for ''{0}''
IntroduceIndirectionRefactoring_adjusting_visibility=Adjusting visibility...
IntroduceIndirectionRefactoring_call_warning_super_keyword=A reference method invocation in ''{0}'' in type ''{1}'' invokes the target method using the super keyword. Cannot replace this occurrence.
IntroduceIndirectionRefactoring_open_hierarchy_error=Found method invocations with the different types ''{0}'' and ''{1}'' from an open ended type hierarchy. No possible target.
IntroduceIndirectionRefactoring_original_pattern=Original element: ''{0}''
IntroduceIndirectionRefactoring_introduce_indirection=Introduce Indirection
IntroduceIndirectionRefactoring_group_description_create_new_method=Create new method
IntroduceIndirectionRefactoring_call_warning_type_arguments=A method invocation in ''{0}'' in type ''{1}'' uses type arguments. This occurrence will not be updated.
IntroduceIndirectionRefactoring_call_warning_static_expression_access=The target method is static, but a method invocation in ''{0}'' in type ''{1}'' is based on an expression rather than the type itself. This occurrence will not be updated.
IntroduceIndirectionRefactoring_group_description_replace_call=Replace method invocation
IntroduceIndirectionRefactoring_call_warning_declaring_type_not_found=The declaring type of a method invocation in ''{0}'' in type ''{1}'' could not be found. This occurrence will not be updated.
IntroduceIndirectionRefactoring_call_warning_anonymous_cannot_qualify=The declaring type of a method invocation in ''{0}'' in type ''{1}'' is anonymous and therefore cannot be qualified. This occurrence will not be updated.
IntroduceIndirectionRefactoring_cannot_update_binary_target_visibility=A visibility update is needed for the member ''{0}'' or an enclosing type, but the member is not writable. Refactoring will introduce compile errors.
IntroduceIndirectionRefactoring_cannot_run_without_intermediary_type=Cannot run Introduce Indirection without a target type.

#--- Infer Type Arguments
InferTypeArgumentsRefactoring_name=Infer Type Arguments
InferTypeArgumentsRefactoring_not50=Project ''{0}'' cannot be processed since its compiler source level is below 1.5.
InferTypeArgumentsRefactoring_calculating_dependencies=Calculating dependencies...
InferTypeArgumentsRefactoring_descriptor_description_project=Infer generic type arguments on ''{0}''
InferTypeArgumentsRefactoring_descriptor_description=Infer generic type arguments
InferTypeArgumentsRefactoring_building=Building constraints system...
InferTypeArgumentsRefactoring_solving=Solving constraints...
InferTypeArgumentsRefactoring_creatingChanges=Creating changes...
InferTypeArgumentsRefactoring_internal_error=Internal error while inferring type arguments in ''{0}''.
InferTypeArgumentsRefactoring_addTypeArguments=Add type arguments
InferTypeArgumentsRefactoring_original_elements=Original elements:
InferTypeArgumentsRefactoring_removeCast=Remove cast
InferTypeArgumentsRefactoring_not50Library=Project ''{0}'' cannot be processed since its JRE System Library version is below 1.5.
InferTypeArgumentsRefactoring_assume_clone=Assume clone() returns an instance of the receiver type
InferTypeArgumentsRefactoring_error_skipped=An unexpected error happened while processing ''{0}''. The rest of this compilation unit has been skipped.
InferTypeArgumentsRefactoring_error_in_cu_skipped=Compile errors found in ''{0}''. The compilation unit has been skipped.
InferTypeArgumentsRefactoring_leave_unconstrained=Leave unconstrained type arguments raw

#--- Miscellaneous
QualifiedNameSearchResult_change_name= Textual qualified name modifications

ASTData_update_imports=Update imports

StubCreationOperation_creating_type_stubs=Creating type stubs...
SourceCreationOperation_creating_source_folder=Creating source folder...

CompilationUnitChange_label=Create ''{0}'' - {1}

MultiStateCompilationUnitChange_name_pattern={0} - {1}
ReplaceInvocationsRefactoring_cannot_find_method_declaration=Cannot find method declaration
ReplaceInvocationsRefactoring_descriptor_description_short=Replace invocations of ''{0}''
CreateCopyOfCompilationUnitChange_create_copy=Copy compilation unit ''{0}'' - {1}
LoggedCreateTargetChange_change_name=Create move target

ClasspathChange_progress_message=Updating build path
ClasspathChange_change_name=Updating build path
